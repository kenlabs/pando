package schema

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	"github.com/ipld/go-ipld-prime/datamodel"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n _Advertisement) FieldPreviousID() MaybeLink_Advertisement {
	return &n.PreviousID
}
func (n _Advertisement) FieldProvider() String {
	return &n.Provider
}
func (n _Advertisement) FieldAddresses() List_String {
	return &n.Addresses
}
func (n _Advertisement) FieldSignature() Bytes {
	return &n.Signature
}
func (n _Advertisement) FieldEntries() Link {
	return &n.Entries
}
func (n _Advertisement) FieldContextID() Bytes {
	return &n.ContextID
}
func (n _Advertisement) FieldMetadata() Bytes {
	return &n.Metadata
}
func (n _Advertisement) FieldIsRm() Bool {
	return &n.IsRm
}

type _Advertisement__Maybe struct {
	m schema.Maybe
	v Advertisement
}
type MaybeAdvertisement = *_Advertisement__Maybe

func (m MaybeAdvertisement) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAdvertisement) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAdvertisement) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAdvertisement) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeAdvertisement) Must() Advertisement {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__Advertisement_PreviousID = _String{"PreviousID"}
	fieldName__Advertisement_Provider   = _String{"Provider"}
	fieldName__Advertisement_Addresses  = _String{"Addresses"}
	fieldName__Advertisement_Signature  = _String{"Signature"}
	fieldName__Advertisement_Entries    = _String{"Entries"}
	fieldName__Advertisement_ContextID  = _String{"ContextID"}
	fieldName__Advertisement_Metadata   = _String{"Metadata"}
	fieldName__Advertisement_IsRm       = _String{"IsRm"}
)
var _ datamodel.Node = (Advertisement)(&_Advertisement{})
var _ schema.TypedNode = (Advertisement)(&_Advertisement{})

func (Advertisement) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Advertisement) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "PreviousID":
		if n.PreviousID.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.PreviousID.v, nil
	case "Provider":
		return &n.Provider, nil
	case "Addresses":
		return &n.Addresses, nil
	case "Signature":
		return &n.Signature, nil
	case "Entries":
		return &n.Entries, nil
	case "ContextID":
		return &n.ContextID, nil
	case "Metadata":
		return &n.Metadata, nil
	case "IsRm":
		return &n.IsRm, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Advertisement) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Advertisement) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.LookupByIndex(0)
}
func (n Advertisement) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Advertisement) MapIterator() datamodel.MapIterator {
	return &_Advertisement__MapItr{n, 0}
}

type _Advertisement__MapItr struct {
	n   Advertisement
	idx int
}

func (itr *_Advertisement__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 8 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Advertisement_PreviousID
		if itr.n.PreviousID.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.PreviousID.v
	case 1:
		k = &fieldName__Advertisement_Provider
		v = &itr.n.Provider
	case 2:
		k = &fieldName__Advertisement_Addresses
		v = &itr.n.Addresses
	case 3:
		k = &fieldName__Advertisement_Signature
		v = &itr.n.Signature
	case 4:
		k = &fieldName__Advertisement_Entries
		v = &itr.n.Entries
	case 5:
		k = &fieldName__Advertisement_ContextID
		v = &itr.n.ContextID
	case 6:
		k = &fieldName__Advertisement_Metadata
		v = &itr.n.Metadata
	case 7:
		k = &fieldName__Advertisement_IsRm
		v = &itr.n.IsRm
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Advertisement__MapItr) Done() bool {
	return itr.idx >= 8
}

func (Advertisement) ListIterator() datamodel.ListIterator {
	return nil
}
func (Advertisement) Length() int64 {
	return 8
}
func (Advertisement) IsAbsent() bool {
	return false
}
func (Advertisement) IsNull() bool {
	return false
}
func (Advertisement) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsBool()
}
func (Advertisement) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsInt()
}
func (Advertisement) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsFloat()
}
func (Advertisement) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsString()
}
func (Advertisement) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsBytes()
}
func (Advertisement) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Advertisement"}.AsLink()
}
func (Advertisement) Prototype() datamodel.NodePrototype {
	return _Advertisement__Prototype{}
}

type _Advertisement__Prototype struct{}

func (_Advertisement__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Advertisement__Builder
	nb.Reset()
	return &nb
}

type _Advertisement__Builder struct {
	_Advertisement__Assembler
}

func (nb *_Advertisement__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Advertisement__Builder) Reset() {
	var w _Advertisement
	var m schema.Maybe
	*nb = _Advertisement__Builder{_Advertisement__Assembler{w: &w, m: &m}}
}

type _Advertisement__Assembler struct {
	w     *_Advertisement
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_PreviousID _Link_Advertisement__Assembler
	ca_Provider   _String__Assembler
	ca_Addresses  _List_String__Assembler
	ca_Signature  _Bytes__Assembler
	ca_Entries    _Link__Assembler
	ca_ContextID  _Bytes__Assembler
	ca_Metadata   _Bytes__Assembler
	ca_IsRm       _Bool__Assembler
}

func (na *_Advertisement__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_PreviousID.reset()
	na.ca_Provider.reset()
	na.ca_Addresses.reset()
	na.ca_Signature.reset()
	na.ca_Entries.reset()
	na.ca_ContextID.reset()
	na.ca_Metadata.reset()
	na.ca_IsRm.reset()
}

var (
	fieldBit__Advertisement_PreviousID  = 1 << 0
	fieldBit__Advertisement_Provider    = 1 << 1
	fieldBit__Advertisement_Addresses   = 1 << 2
	fieldBit__Advertisement_Signature   = 1 << 3
	fieldBit__Advertisement_Entries     = 1 << 4
	fieldBit__Advertisement_ContextID   = 1 << 5
	fieldBit__Advertisement_Metadata    = 1 << 6
	fieldBit__Advertisement_IsRm        = 1 << 7
	fieldBits__Advertisement_sufficient = 0 + 1<<1 + 1<<2 + 1<<3 + 1<<4 + 1<<5 + 1<<6 + 1<<7
)

func (na *_Advertisement__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Advertisement{}
	}
	return na, nil
}
func (_Advertisement__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.BeginList(0)
}
func (na *_Advertisement__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Advertisement__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignBool(false)
}
func (_Advertisement__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignInt(0)
}
func (_Advertisement__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignFloat(0)
}
func (_Advertisement__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignString("")
}
func (_Advertisement__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignBytes(nil)
}
func (_Advertisement__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement"}.AssignLink(nil)
}
func (na *_Advertisement__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Advertisement); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Advertisement", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Advertisement__Assembler) Prototype() datamodel.NodePrototype {
	return _Advertisement__Prototype{}
}
func (ma *_Advertisement__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.PreviousID.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Provider.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Addresses.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Signature.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Entries.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_ContextID.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Metadata.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_IsRm.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Advertisement__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "PreviousID":
		if ma.s&fieldBit__Advertisement_PreviousID != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_PreviousID}
		}
		ma.s += fieldBit__Advertisement_PreviousID
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_PreviousID.w = &ma.w.PreviousID.v
		ma.ca_PreviousID.m = &ma.w.PreviousID.m
		return &ma.ca_PreviousID, nil
	case "Provider":
		if ma.s&fieldBit__Advertisement_Provider != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Provider}
		}
		ma.s += fieldBit__Advertisement_Provider
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider, nil
	case "Addresses":
		if ma.s&fieldBit__Advertisement_Addresses != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Addresses}
		}
		ma.s += fieldBit__Advertisement_Addresses
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Addresses.w = &ma.w.Addresses
		ma.ca_Addresses.m = &ma.cm
		return &ma.ca_Addresses, nil
	case "Signature":
		if ma.s&fieldBit__Advertisement_Signature != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Signature}
		}
		ma.s += fieldBit__Advertisement_Signature
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Signature.w = &ma.w.Signature
		ma.ca_Signature.m = &ma.cm
		return &ma.ca_Signature, nil
	case "Entries":
		if ma.s&fieldBit__Advertisement_Entries != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Entries}
		}
		ma.s += fieldBit__Advertisement_Entries
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries, nil
	case "ContextID":
		if ma.s&fieldBit__Advertisement_ContextID != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_ContextID}
		}
		ma.s += fieldBit__Advertisement_ContextID
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_ContextID.w = &ma.w.ContextID
		ma.ca_ContextID.m = &ma.cm
		return &ma.ca_ContextID, nil
	case "Metadata":
		if ma.s&fieldBit__Advertisement_Metadata != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Metadata}
		}
		ma.s += fieldBit__Advertisement_Metadata
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_Metadata.w = &ma.w.Metadata
		ma.ca_Metadata.m = &ma.cm
		return &ma.ca_Metadata, nil
	case "IsRm":
		if ma.s&fieldBit__Advertisement_IsRm != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_IsRm}
		}
		ma.s += fieldBit__Advertisement_IsRm
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_IsRm.w = &ma.w.IsRm
		ma.ca_IsRm.m = &ma.cm
		return &ma.ca_IsRm, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Advertisement", Key: &_String{k}}
}
func (ma *_Advertisement__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Advertisement__KeyAssembler)(ma)
}
func (ma *_Advertisement__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_PreviousID.w = &ma.w.PreviousID.v
		ma.ca_PreviousID.m = &ma.w.PreviousID.m
		return &ma.ca_PreviousID
	case 1:
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider
	case 2:
		ma.ca_Addresses.w = &ma.w.Addresses
		ma.ca_Addresses.m = &ma.cm
		return &ma.ca_Addresses
	case 3:
		ma.ca_Signature.w = &ma.w.Signature
		ma.ca_Signature.m = &ma.cm
		return &ma.ca_Signature
	case 4:
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries
	case 5:
		ma.ca_ContextID.w = &ma.w.ContextID
		ma.ca_ContextID.m = &ma.cm
		return &ma.ca_ContextID
	case 6:
		ma.ca_Metadata.w = &ma.w.Metadata
		ma.ca_Metadata.m = &ma.cm
		return &ma.ca_Metadata
	case 7:
		ma.ca_IsRm.w = &ma.w.IsRm
		ma.ca_IsRm.m = &ma.cm
		return &ma.ca_IsRm
	default:
		panic("unreachable")
	}
}
func (ma *_Advertisement__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Advertisement_sufficient != fieldBits__Advertisement_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Advertisement_Provider == 0 {
			err.Missing = append(err.Missing, "Provider")
		}
		if ma.s&fieldBit__Advertisement_Addresses == 0 {
			err.Missing = append(err.Missing, "Addresses")
		}
		if ma.s&fieldBit__Advertisement_Signature == 0 {
			err.Missing = append(err.Missing, "Signature")
		}
		if ma.s&fieldBit__Advertisement_Entries == 0 {
			err.Missing = append(err.Missing, "Entries")
		}
		if ma.s&fieldBit__Advertisement_ContextID == 0 {
			err.Missing = append(err.Missing, "ContextID")
		}
		if ma.s&fieldBit__Advertisement_Metadata == 0 {
			err.Missing = append(err.Missing, "Metadata")
		}
		if ma.s&fieldBit__Advertisement_IsRm == 0 {
			err.Missing = append(err.Missing, "IsRm")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Advertisement__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Advertisement__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _Advertisement__KeyAssembler _Advertisement__Assembler

func (_Advertisement__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.BeginMap(0)
}
func (_Advertisement__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.BeginList(0)
}
func (na *_Advertisement__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignNull()
}
func (_Advertisement__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignBool(false)
}
func (_Advertisement__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignInt(0)
}
func (_Advertisement__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Advertisement__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "PreviousID":
		if ka.s&fieldBit__Advertisement_PreviousID != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_PreviousID}
		}
		ka.s += fieldBit__Advertisement_PreviousID
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Provider":
		if ka.s&fieldBit__Advertisement_Provider != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Provider}
		}
		ka.s += fieldBit__Advertisement_Provider
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "Addresses":
		if ka.s&fieldBit__Advertisement_Addresses != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Addresses}
		}
		ka.s += fieldBit__Advertisement_Addresses
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	case "Signature":
		if ka.s&fieldBit__Advertisement_Signature != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Signature}
		}
		ka.s += fieldBit__Advertisement_Signature
		ka.state = maState_expectValue
		ka.f = 3
		return nil
	case "Entries":
		if ka.s&fieldBit__Advertisement_Entries != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Entries}
		}
		ka.s += fieldBit__Advertisement_Entries
		ka.state = maState_expectValue
		ka.f = 4
		return nil
	case "ContextID":
		if ka.s&fieldBit__Advertisement_ContextID != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_ContextID}
		}
		ka.s += fieldBit__Advertisement_ContextID
		ka.state = maState_expectValue
		ka.f = 5
		return nil
	case "Metadata":
		if ka.s&fieldBit__Advertisement_Metadata != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Metadata}
		}
		ka.s += fieldBit__Advertisement_Metadata
		ka.state = maState_expectValue
		ka.f = 6
		return nil
	case "IsRm":
		if ka.s&fieldBit__Advertisement_IsRm != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_IsRm}
		}
		ka.s += fieldBit__Advertisement_IsRm
		ka.state = maState_expectValue
		ka.f = 7
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "schema.Advertisement", Key: &_String{k}}
	}
}
func (_Advertisement__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignBytes(nil)
}
func (_Advertisement__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Advertisement__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Advertisement__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Advertisement) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Advertisement) Representation() datamodel.Node {
	return (*_Advertisement__Repr)(n)
}

type _Advertisement__Repr _Advertisement

var (
	fieldName__Advertisement_PreviousID_serial = _String{"PreviousID"}
	fieldName__Advertisement_Provider_serial   = _String{"Provider"}
	fieldName__Advertisement_Addresses_serial  = _String{"Addresses"}
	fieldName__Advertisement_Signature_serial  = _String{"Signature"}
	fieldName__Advertisement_Entries_serial    = _String{"Entries"}
	fieldName__Advertisement_ContextID_serial  = _String{"ContextID"}
	fieldName__Advertisement_Metadata_serial   = _String{"Metadata"}
	fieldName__Advertisement_IsRm_serial       = _String{"IsRm"}
)
var _ datamodel.Node = &_Advertisement__Repr{}

func (_Advertisement__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_Advertisement__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "PreviousID":
		if n.PreviousID.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.PreviousID.v.Representation(), nil
	case "Provider":
		return n.Provider.Representation(), nil
	case "Addresses":
		return n.Addresses.Representation(), nil
	case "Signature":
		return n.Signature.Representation(), nil
	case "Entries":
		return n.Entries.Representation(), nil
	case "ContextID":
		return n.ContextID.Representation(), nil
	case "Metadata":
		return n.Metadata.Representation(), nil
	case "IsRm":
		return n.IsRm.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_Advertisement__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Advertisement__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.LookupByIndex(0)
}
func (n _Advertisement__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Advertisement__Repr) MapIterator() datamodel.MapIterator {
	return &_Advertisement__ReprMapItr{n, 0}
}

type _Advertisement__ReprMapItr struct {
	n   *_Advertisement__Repr
	idx int
}

func (itr *_Advertisement__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 8 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Advertisement_PreviousID_serial
		if itr.n.PreviousID.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.PreviousID.v.Representation()
	case 1:
		k = &fieldName__Advertisement_Provider_serial
		v = itr.n.Provider.Representation()
	case 2:
		k = &fieldName__Advertisement_Addresses_serial
		v = itr.n.Addresses.Representation()
	case 3:
		k = &fieldName__Advertisement_Signature_serial
		v = itr.n.Signature.Representation()
	case 4:
		k = &fieldName__Advertisement_Entries_serial
		v = itr.n.Entries.Representation()
	case 5:
		k = &fieldName__Advertisement_ContextID_serial
		v = itr.n.ContextID.Representation()
	case 6:
		k = &fieldName__Advertisement_Metadata_serial
		v = itr.n.Metadata.Representation()
	case 7:
		k = &fieldName__Advertisement_IsRm_serial
		v = itr.n.IsRm.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Advertisement__ReprMapItr) Done() bool {
	return itr.idx >= 8
}
func (_Advertisement__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Advertisement__Repr) Length() int64 {
	l := 8
	if rn.PreviousID.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Advertisement__Repr) IsAbsent() bool {
	return false
}
func (_Advertisement__Repr) IsNull() bool {
	return false
}
func (_Advertisement__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsBool()
}
func (_Advertisement__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsInt()
}
func (_Advertisement__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsFloat()
}
func (_Advertisement__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsString()
}
func (_Advertisement__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsBytes()
}
func (_Advertisement__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Advertisement.Repr"}.AsLink()
}
func (_Advertisement__Repr) Prototype() datamodel.NodePrototype {
	return _Advertisement__ReprPrototype{}
}

type _Advertisement__ReprPrototype struct{}

func (_Advertisement__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Advertisement__ReprBuilder
	nb.Reset()
	return &nb
}

type _Advertisement__ReprBuilder struct {
	_Advertisement__ReprAssembler
}

func (nb *_Advertisement__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Advertisement__ReprBuilder) Reset() {
	var w _Advertisement
	var m schema.Maybe
	*nb = _Advertisement__ReprBuilder{_Advertisement__ReprAssembler{w: &w, m: &m}}
}

type _Advertisement__ReprAssembler struct {
	w     *_Advertisement
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm            schema.Maybe
	ca_PreviousID _Link_Advertisement__ReprAssembler
	ca_Provider   _String__ReprAssembler
	ca_Addresses  _List_String__ReprAssembler
	ca_Signature  _Bytes__ReprAssembler
	ca_Entries    _Link__ReprAssembler
	ca_ContextID  _Bytes__ReprAssembler
	ca_Metadata   _Bytes__ReprAssembler
	ca_IsRm       _Bool__ReprAssembler
}

func (na *_Advertisement__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_PreviousID.reset()
	na.ca_Provider.reset()
	na.ca_Addresses.reset()
	na.ca_Signature.reset()
	na.ca_Entries.reset()
	na.ca_ContextID.reset()
	na.ca_Metadata.reset()
	na.ca_IsRm.reset()
}
func (na *_Advertisement__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Advertisement{}
	}
	return na, nil
}
func (_Advertisement__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.BeginList(0)
}
func (na *_Advertisement__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Advertisement__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignBool(false)
}
func (_Advertisement__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignInt(0)
}
func (_Advertisement__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignFloat(0)
}
func (_Advertisement__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignString("")
}
func (_Advertisement__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignBytes(nil)
}
func (_Advertisement__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Advertisement.Repr"}.AssignLink(nil)
}
func (na *_Advertisement__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Advertisement); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Advertisement.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Advertisement__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Advertisement__ReprPrototype{}
}
func (ma *_Advertisement__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.w.PreviousID.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Advertisement__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "PreviousID":
		if ma.s&fieldBit__Advertisement_PreviousID != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_PreviousID_serial}
		}
		ma.s += fieldBit__Advertisement_PreviousID
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_PreviousID.w = &ma.w.PreviousID.v
		ma.ca_PreviousID.m = &ma.w.PreviousID.m

		return &ma.ca_PreviousID, nil
	case "Provider":
		if ma.s&fieldBit__Advertisement_Provider != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Provider_serial}
		}
		ma.s += fieldBit__Advertisement_Provider
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider, nil
	case "Addresses":
		if ma.s&fieldBit__Advertisement_Addresses != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Addresses_serial}
		}
		ma.s += fieldBit__Advertisement_Addresses
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Addresses.w = &ma.w.Addresses
		ma.ca_Addresses.m = &ma.cm
		return &ma.ca_Addresses, nil
	case "Signature":
		if ma.s&fieldBit__Advertisement_Signature != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Signature_serial}
		}
		ma.s += fieldBit__Advertisement_Signature
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Signature.w = &ma.w.Signature
		ma.ca_Signature.m = &ma.cm
		return &ma.ca_Signature, nil
	case "Entries":
		if ma.s&fieldBit__Advertisement_Entries != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Entries_serial}
		}
		ma.s += fieldBit__Advertisement_Entries
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries, nil
	case "ContextID":
		if ma.s&fieldBit__Advertisement_ContextID != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_ContextID_serial}
		}
		ma.s += fieldBit__Advertisement_ContextID
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_ContextID.w = &ma.w.ContextID
		ma.ca_ContextID.m = &ma.cm
		return &ma.ca_ContextID, nil
	case "Metadata":
		if ma.s&fieldBit__Advertisement_Metadata != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Metadata_serial}
		}
		ma.s += fieldBit__Advertisement_Metadata
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_Metadata.w = &ma.w.Metadata
		ma.ca_Metadata.m = &ma.cm
		return &ma.ca_Metadata, nil
	case "IsRm":
		if ma.s&fieldBit__Advertisement_IsRm != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_IsRm_serial}
		}
		ma.s += fieldBit__Advertisement_IsRm
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_IsRm.w = &ma.w.IsRm
		ma.ca_IsRm.m = &ma.cm
		return &ma.ca_IsRm, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Advertisement.Repr", Key: &_String{k}}
}
func (ma *_Advertisement__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Advertisement__ReprKeyAssembler)(ma)
}
func (ma *_Advertisement__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_PreviousID.w = &ma.w.PreviousID.v
		ma.ca_PreviousID.m = &ma.w.PreviousID.m

		return &ma.ca_PreviousID
	case 1:
		ma.ca_Provider.w = &ma.w.Provider
		ma.ca_Provider.m = &ma.cm
		return &ma.ca_Provider
	case 2:
		ma.ca_Addresses.w = &ma.w.Addresses
		ma.ca_Addresses.m = &ma.cm
		return &ma.ca_Addresses
	case 3:
		ma.ca_Signature.w = &ma.w.Signature
		ma.ca_Signature.m = &ma.cm
		return &ma.ca_Signature
	case 4:
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries
	case 5:
		ma.ca_ContextID.w = &ma.w.ContextID
		ma.ca_ContextID.m = &ma.cm
		return &ma.ca_ContextID
	case 6:
		ma.ca_Metadata.w = &ma.w.Metadata
		ma.ca_Metadata.m = &ma.cm
		return &ma.ca_Metadata
	case 7:
		ma.ca_IsRm.w = &ma.w.IsRm
		ma.ca_IsRm.m = &ma.cm
		return &ma.ca_IsRm
	default:
		panic("unreachable")
	}
}
func (ma *_Advertisement__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__Advertisement_sufficient != fieldBits__Advertisement_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__Advertisement_Provider == 0 {
			err.Missing = append(err.Missing, "Provider")
		}
		if ma.s&fieldBit__Advertisement_Addresses == 0 {
			err.Missing = append(err.Missing, "Addresses")
		}
		if ma.s&fieldBit__Advertisement_Signature == 0 {
			err.Missing = append(err.Missing, "Signature")
		}
		if ma.s&fieldBit__Advertisement_Entries == 0 {
			err.Missing = append(err.Missing, "Entries")
		}
		if ma.s&fieldBit__Advertisement_ContextID == 0 {
			err.Missing = append(err.Missing, "ContextID")
		}
		if ma.s&fieldBit__Advertisement_Metadata == 0 {
			err.Missing = append(err.Missing, "Metadata")
		}
		if ma.s&fieldBit__Advertisement_IsRm == 0 {
			err.Missing = append(err.Missing, "IsRm")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Advertisement__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Advertisement__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _Advertisement__ReprKeyAssembler _Advertisement__ReprAssembler

func (_Advertisement__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Advertisement__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Advertisement__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignNull()
}
func (_Advertisement__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Advertisement__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Advertisement__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Advertisement__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "PreviousID":
		if ka.s&fieldBit__Advertisement_PreviousID != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_PreviousID_serial}
		}
		ka.s += fieldBit__Advertisement_PreviousID
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Provider":
		if ka.s&fieldBit__Advertisement_Provider != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Provider_serial}
		}
		ka.s += fieldBit__Advertisement_Provider
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	case "Addresses":
		if ka.s&fieldBit__Advertisement_Addresses != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Addresses_serial}
		}
		ka.s += fieldBit__Advertisement_Addresses
		ka.state = maState_expectValue
		ka.f = 2
		return nil
	case "Signature":
		if ka.s&fieldBit__Advertisement_Signature != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Signature_serial}
		}
		ka.s += fieldBit__Advertisement_Signature
		ka.state = maState_expectValue
		ka.f = 3
		return nil
	case "Entries":
		if ka.s&fieldBit__Advertisement_Entries != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Entries_serial}
		}
		ka.s += fieldBit__Advertisement_Entries
		ka.state = maState_expectValue
		ka.f = 4
		return nil
	case "ContextID":
		if ka.s&fieldBit__Advertisement_ContextID != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_ContextID_serial}
		}
		ka.s += fieldBit__Advertisement_ContextID
		ka.state = maState_expectValue
		ka.f = 5
		return nil
	case "Metadata":
		if ka.s&fieldBit__Advertisement_Metadata != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_Metadata_serial}
		}
		ka.s += fieldBit__Advertisement_Metadata
		ka.state = maState_expectValue
		ka.f = 6
		return nil
	case "IsRm":
		if ka.s&fieldBit__Advertisement_IsRm != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__Advertisement_IsRm_serial}
		}
		ka.s += fieldBit__Advertisement_IsRm
		ka.state = maState_expectValue
		ka.f = 7
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.Advertisement.Repr", Key: &_String{k}}
}
func (_Advertisement__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Advertisement__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Advertisement.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Advertisement__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Advertisement__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n _Any) AsInterface() _Any__iface {
	return n.x
}

type _Any__Maybe struct {
	m schema.Maybe
	v Any
}
type MaybeAny = *_Any__Maybe

func (m MaybeAny) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeAny) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeAny) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeAny) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeAny) Must() Any {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	memberName__Any_Bool   = _String{"Bool"}
	memberName__Any_Int    = _String{"Int"}
	memberName__Any_Float  = _String{"Float"}
	memberName__Any_String = _String{"String"}
	memberName__Any_Bytes  = _String{"Bytes"}
	memberName__Any_Map    = _String{"Map"}
	memberName__Any_List   = _String{"List"}
	memberName__Any_Link   = _String{"Link"}
)
var _ datamodel.Node = (Any)(&_Any{})
var _ schema.TypedNode = (Any)(&_Any{})

func (Any) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Any) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Bool":
		if n2, ok := n.x.(Bool); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Int":
		if n2, ok := n.x.(Int); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Float":
		if n2, ok := n.x.(Float); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "String":
		if n2, ok := n.x.(String); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Bytes":
		if n2, ok := n.x.(Bytes); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Map":
		if n2, ok := n.x.(Map); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "List":
		if n2, ok := n.x.(List); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	case "Link":
		if n2, ok := n.x.(Link); ok {
			return n2, nil
		} else {
			return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n Any) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Any) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Any"}.LookupByIndex(0)
}
func (n Any) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Any) MapIterator() datamodel.MapIterator {
	return &_Any__MapItr{n, false}
}

type _Any__MapItr struct {
	n    Any
	done bool
}

func (itr *_Any__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.done {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch n2 := itr.n.x.(type) {
	case Bool:
		k, v = &memberName__Any_Bool, n2
	case Int:
		k, v = &memberName__Any_Int, n2
	case Float:
		k, v = &memberName__Any_Float, n2
	case String:
		k, v = &memberName__Any_String, n2
	case Bytes:
		k, v = &memberName__Any_Bytes, n2
	case Map:
		k, v = &memberName__Any_Map, n2
	case List:
		k, v = &memberName__Any_List, n2
	case Link:
		k, v = &memberName__Any_Link, n2
	default:
		panic("unreachable")
	}
	itr.done = true
	return
}
func (itr *_Any__MapItr) Done() bool {
	return itr.done
}

func (Any) ListIterator() datamodel.ListIterator {
	return nil
}
func (Any) Length() int64 {
	return 1
}
func (Any) IsAbsent() bool {
	return false
}
func (Any) IsNull() bool {
	return false
}
func (Any) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsBool()
}
func (Any) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsInt()
}
func (Any) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsFloat()
}
func (Any) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsString()
}
func (Any) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsBytes()
}
func (Any) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Any"}.AsLink()
}
func (Any) Prototype() datamodel.NodePrototype {
	return _Any__Prototype{}
}

type _Any__Prototype struct{}

func (_Any__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Any__Builder
	nb.Reset()
	return &nb
}

type _Any__Builder struct {
	_Any__Assembler
}

func (nb *_Any__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__Builder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__Builder{_Any__Assembler{w: &w, m: &m}}
}

type _Any__Assembler struct {
	w     *_Any
	m     *schema.Maybe
	state maState

	cm  schema.Maybe
	ca1 *_Bool__Assembler

	ca2 *_Int__Assembler

	ca3 *_Float__Assembler

	ca4 *_String__Assembler

	ca5 *_Bytes__Assembler

	ca6 *_Map__Assembler

	ca7 *_List__Assembler

	ca8 *_Link__Assembler
	ca  uint
}

func (na *_Any__Assembler) reset() {
	na.state = maState_initial
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()

	case 2:
		na.ca2.reset()

	case 3:
		na.ca3.reset()

	case 4:
		na.ca4.reset()

	case 5:
		na.ca5.reset()

	case 6:
		na.ca6.reset()

	case 7:
		na.ca7.reset()

	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
	na.cm = schema.Maybe_Absent
}
func (na *_Any__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Any{}
	}
	return na, nil
}
func (_Any__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Any"}.BeginList(0)
}
func (na *_Any__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Any"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Any__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignBool(false)
}
func (_Any__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignInt(0)
}
func (_Any__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignFloat(0)
}
func (_Any__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignString("")
}
func (_Any__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignBytes(nil)
}
func (_Any__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Any"}.AssignLink(nil)
}
func (na *_Any__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Any", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Any__Assembler) Prototype() datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (ma *_Any__Assembler) valueFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.state = maState_initial
		return true
	default:
		return false
	}
}
func (ma *_Any__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly.
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	if ma.ca != 0 {
		return nil, schema.ErrNotUnionStructure{TypeName: "schema.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ma.state = maState_midValue
		ma.ca = 1
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1, nil
	case "Int":
		ma.state = maState_midValue
		ma.ca = 2
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2, nil
	case "Float":
		ma.state = maState_midValue
		ma.ca = 3
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3, nil
	case "String":
		ma.state = maState_midValue
		ma.ca = 4
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4, nil
	case "Bytes":
		ma.state = maState_midValue
		ma.ca = 5
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5, nil
	case "Map":
		ma.state = maState_midValue
		ma.ca = 6
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6, nil
	case "List":
		ma.state = maState_midValue
		ma.ca = 7
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7, nil
	case "Link":
		ma.state = maState_midValue
		ma.ca = 8
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.Any", Key: &_String{k}}
}
func (ma *_Any__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on for the moment, but we'll still be erroring shortly... or rather, the keyassembler will be.
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Any__KeyAssembler)(ma)
}
func (ma *_Any__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.ca {
	case 1:
		x := &_Bool{}
		ma.w.x = x
		if ma.ca1 == nil {
			ma.ca1 = &_Bool__Assembler{}
		}
		ma.ca1.w = x
		ma.ca1.m = &ma.cm
		return ma.ca1
	case 2:
		x := &_Int{}
		ma.w.x = x
		if ma.ca2 == nil {
			ma.ca2 = &_Int__Assembler{}
		}
		ma.ca2.w = x
		ma.ca2.m = &ma.cm
		return ma.ca2
	case 3:
		x := &_Float{}
		ma.w.x = x
		if ma.ca3 == nil {
			ma.ca3 = &_Float__Assembler{}
		}
		ma.ca3.w = x
		ma.ca3.m = &ma.cm
		return ma.ca3
	case 4:
		x := &_String{}
		ma.w.x = x
		if ma.ca4 == nil {
			ma.ca4 = &_String__Assembler{}
		}
		ma.ca4.w = x
		ma.ca4.m = &ma.cm
		return ma.ca4
	case 5:
		x := &_Bytes{}
		ma.w.x = x
		if ma.ca5 == nil {
			ma.ca5 = &_Bytes__Assembler{}
		}
		ma.ca5.w = x
		ma.ca5.m = &ma.cm
		return ma.ca5
	case 6:
		x := &_Map{}
		ma.w.x = x
		if ma.ca6 == nil {
			ma.ca6 = &_Map__Assembler{}
		}
		ma.ca6.w = x
		ma.ca6.m = &ma.cm
		return ma.ca6
	case 7:
		x := &_List{}
		ma.w.x = x
		if ma.ca7 == nil {
			ma.ca7 = &_List__Assembler{}
		}
		ma.ca7.w = x
		ma.ca7.m = &ma.cm
		return ma.ca7
	case 8:
		x := &_Link{}
		ma.w.x = x
		if ma.ca8 == nil {
			ma.ca8 = &_Link__Assembler{}
		}
		ma.ca8.w = x
		ma.ca8.m = &ma.cm
		return ma.ca8
	default:
		panic("unreachable")
	}
}
func (ma *_Any__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.ca == 0 {
		return schema.ErrNotUnionStructure{TypeName: "schema.Any", Detail: "a union must have exactly one entry (not none)!"}
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Any__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Any__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	switch k {
	case "Bool":
		return _Bool__Prototype{}
	case "Int":
		return _Int__Prototype{}
	case "Float":
		return _Float__Prototype{}
	case "String":
		return _String__Prototype{}
	case "Bytes":
		return _Bytes__Prototype{}
	case "Map":
		return _Map__Prototype{}
	case "List":
		return _List__Prototype{}
	case "Link":
		return _Link__Prototype{}
	default:
		return nil
	}
}

type _Any__KeyAssembler _Any__Assembler

func (_Any__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.BeginMap(0)
}
func (_Any__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.BeginList(0)
}
func (na *_Any__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignNull()
}
func (_Any__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignBool(false)
}
func (_Any__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignInt(0)
}
func (_Any__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Any__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	if ka.ca != 0 {
		return schema.ErrNotUnionStructure{TypeName: "schema.Any", Detail: "cannot add another entry -- a union can only contain one thing!"}
	}
	switch k {
	case "Bool":
		ka.ca = 1
		ka.state = maState_expectValue
		return nil
	case "Int":
		ka.ca = 2
		ka.state = maState_expectValue
		return nil
	case "Float":
		ka.ca = 3
		ka.state = maState_expectValue
		return nil
	case "String":
		ka.ca = 4
		ka.state = maState_expectValue
		return nil
	case "Bytes":
		ka.ca = 5
		ka.state = maState_expectValue
		return nil
	case "Map":
		ka.ca = 6
		ka.state = maState_expectValue
		return nil
	case "List":
		ka.ca = 7
		ka.state = maState_expectValue
		return nil
	case "Link":
		ka.ca = 8
		ka.state = maState_expectValue
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.Any", Key: &_String{k}} // TODO: error quality: ErrInvalidUnionDiscriminant ?
}
func (_Any__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignBytes(nil)
}
func (_Any__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.Any.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Any__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Any__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (Any) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Any) Representation() datamodel.Node {
	return (*_Any__Repr)(n)
}

type _Any__Repr _Any

var _ datamodel.Node = &_Any__Repr{}

func (n *_Any__Repr) Kind() datamodel.Kind {
	switch n.x.(type) {
	case Bool:
		return datamodel.Kind_Bool
	case Int:
		return datamodel.Kind_Int
	case Float:
		return datamodel.Kind_Float
	case String:
		return datamodel.Kind_String
	case Bytes:
		return datamodel.Kind_Bytes
	case Map:
		return datamodel.Kind_Map
	case List:
		return datamodel.Kind_List
	case Link:
		return datamodel.Kind_Link
	default:
		panic("unreachable")
	}
}
func (n *_Any__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByString(key)
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "LookupByString", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupByNode(key)
	case List:
		return n2.Representation().LookupByNode(key)
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "LookupByNode", AppropriateKind: datamodel.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().LookupByIndex(idx)
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "LookupByIndex", AppropriateKind: datamodel.KindSet_JustList, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().LookupBySegment(seg)
	case List:
		return n2.Representation().LookupBySegment(seg)
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "LookupBySegment", AppropriateKind: datamodel.KindSet_Recursive, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) MapIterator() datamodel.MapIterator {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().MapIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) ListIterator() datamodel.ListIterator {
	switch n2 := n.x.(type) {
	case List:
		return n2.Representation().ListIterator()
	default:
		return nil
	}
}
func (n *_Any__Repr) Length() int64 {
	switch n2 := n.x.(type) {
	case Map:
		return n2.Representation().Length()
	case List:
		return n2.Representation().Length()
	default:
		return -1
	}
}
func (n *_Any__Repr) IsAbsent() bool {
	return false
}
func (n *_Any__Repr) IsNull() bool {
	return false
}
func (n *_Any__Repr) AsBool() (bool, error) {
	switch n2 := n.x.(type) {
	case Bool:
		return n2.Representation().AsBool()
	default:
		return false, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsBool", AppropriateKind: datamodel.KindSet_JustBool, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsInt() (int64, error) {
	switch n2 := n.x.(type) {
	case Int:
		return n2.Representation().AsInt()
	default:
		return 0, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsInt", AppropriateKind: datamodel.KindSet_JustInt, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsFloat() (float64, error) {
	switch n2 := n.x.(type) {
	case Float:
		return n2.Representation().AsFloat()
	default:
		return 0, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsFloat", AppropriateKind: datamodel.KindSet_JustFloat, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsString() (string, error) {
	switch n2 := n.x.(type) {
	case String:
		return n2.Representation().AsString()
	default:
		return "", datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsString", AppropriateKind: datamodel.KindSet_JustString, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsBytes() ([]byte, error) {
	switch n2 := n.x.(type) {
	case Bytes:
		return n2.Representation().AsBytes()
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsBytes", AppropriateKind: datamodel.KindSet_JustBytes, ActualKind: n.Kind()}
	}
}
func (n *_Any__Repr) AsLink() (datamodel.Link, error) {
	switch n2 := n.x.(type) {
	case Link:
		return n2.Representation().AsLink()
	default:
		return nil, datamodel.ErrWrongKind{TypeName: "schema.Any.Repr", MethodName: "AsLink", AppropriateKind: datamodel.KindSet_JustLink, ActualKind: n.Kind()}
	}
}
func (_Any__Repr) Prototype() datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

type _Any__ReprPrototype struct{}

func (_Any__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Any__ReprBuilder
	nb.Reset()
	return &nb
}

type _Any__ReprBuilder struct {
	_Any__ReprAssembler
}

func (nb *_Any__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Any__ReprBuilder) Reset() {
	var w _Any
	var m schema.Maybe
	*nb = _Any__ReprBuilder{_Any__ReprAssembler{w: &w, m: &m}}
}

type _Any__ReprAssembler struct {
	w   *_Any
	m   *schema.Maybe
	ca1 *_Bool__ReprAssembler
	ca2 *_Int__ReprAssembler
	ca3 *_Float__ReprAssembler
	ca4 *_String__ReprAssembler
	ca5 *_Bytes__ReprAssembler
	ca6 *_Map__ReprAssembler
	ca7 *_List__ReprAssembler
	ca8 *_Link__ReprAssembler
	ca  uint
}

func (na *_Any__ReprAssembler) reset() {
	switch na.ca {
	case 0:
		return
	case 1:
		na.ca1.reset()
	case 2:
		na.ca2.reset()
	case 3:
		na.ca3.reset()
	case 4:
		na.ca4.reset()
	case 5:
		na.ca5.reset()
	case 6:
		na.ca6.reset()
	case 7:
		na.ca7.reset()
	case 8:
		na.ca8.reset()
	default:
		panic("unreachable")
	}
	na.ca = 0
}
func (na *_Any__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 6
	x := &_Map{}
	na.w.x = x
	if na.ca6 == nil {
		na.ca6 = &_Map__ReprAssembler{}
	}
	na.ca6.w = x
	na.ca6.m = na.m
	return na.ca6.BeginMap(sizeHint)
}
func (na *_Any__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 7
	x := &_List{}
	na.w.x = x
	if na.ca7 == nil {
		na.ca7 = &_List__ReprAssembler{}
	}
	na.ca7.w = x
	na.ca7.m = na.m
	return na.ca7.BeginList(sizeHint)
}
func (na *_Any__ReprAssembler) AssignNull() error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	return schema.ErrNotUnionStructure{TypeName: "schema.Any.Repr", Detail: "AssignNull called but is not valid for any of the kinds that are valid members of this union"}
}
func (na *_Any__ReprAssembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 1
	x := &_Bool{}
	na.w.x = x
	if na.ca1 == nil {
		na.ca1 = &_Bool__ReprAssembler{}
	}
	na.ca1.w = x
	na.ca1.m = na.m
	return na.ca1.AssignBool(v)
}
func (na *_Any__ReprAssembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 2
	x := &_Int{}
	na.w.x = x
	if na.ca2 == nil {
		na.ca2 = &_Int__ReprAssembler{}
	}
	na.ca2.w = x
	na.ca2.m = na.m
	return na.ca2.AssignInt(v)
}
func (na *_Any__ReprAssembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 3
	x := &_Float{}
	na.w.x = x
	if na.ca3 == nil {
		na.ca3 = &_Float__ReprAssembler{}
	}
	na.ca3.w = x
	na.ca3.m = na.m
	return na.ca3.AssignFloat(v)
}
func (na *_Any__ReprAssembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 4
	x := &_String{}
	na.w.x = x
	if na.ca4 == nil {
		na.ca4 = &_String__ReprAssembler{}
	}
	na.ca4.w = x
	na.ca4.m = na.m
	return na.ca4.AssignString(v)
}
func (na *_Any__ReprAssembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 5
	x := &_Bytes{}
	na.w.x = x
	if na.ca5 == nil {
		na.ca5 = &_Bytes__ReprAssembler{}
	}
	na.ca5.w = x
	na.ca5.m = na.m
	return na.ca5.AssignBytes(v)
}
func (na *_Any__ReprAssembler) AssignLink(v datamodel.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign into assembler that's already working on a larger structure!")
	}
	if na.w == nil {
		na.w = &_Any{}
	}
	na.ca = 8
	x := &_Link{}
	na.w.x = x
	if na.ca8 == nil {
		na.ca8 = &_Link__ReprAssembler{}
	}
	na.ca8.w = x
	na.ca8.m = na.m
	return na.ca8.AssignLink(v)
}
func (na *_Any__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Any); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	switch v.Kind() {
	case datamodel.Kind_Bool:
		v2, _ := v.AsBool()
		return na.AssignBool(v2)
	case datamodel.Kind_Int:
		v2, _ := v.AsInt()
		return na.AssignInt(v2)
	case datamodel.Kind_Float:
		v2, _ := v.AsFloat()
		return na.AssignFloat(v2)
	case datamodel.Kind_String:
		v2, _ := v.AsString()
		return na.AssignString(v2)
	case datamodel.Kind_Bytes:
		v2, _ := v.AsBytes()
		return na.AssignBytes(v2)
	case datamodel.Kind_Map:
		na, err := na.BeginMap(v.Length())
		if err != nil {
			return err
		}
		itr := v.MapIterator()
		for !itr.Done() {
			k, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleKey().AssignNode(k); err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case datamodel.Kind_List:
		na, err := na.BeginList(v.Length())
		if err != nil {
			return err
		}
		itr := v.ListIterator()
		for !itr.Done() {
			_, v, err := itr.Next()
			if err != nil {
				return err
			}
			if err := na.AssembleValue().AssignNode(v); err != nil {
				return err
			}
		}
		return na.Finish()
	case datamodel.Kind_Link:
		v2, _ := v.AsLink()
		return na.AssignLink(v2)
	default:
		panic("unreachable")
	}
}
func (na *_Any__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n Bool) Bool() bool {
	return n.x
}
func (_Bool__Prototype) FromBool(v bool) (Bool, error) {
	n := _Bool{v}
	return &n, nil
}

type _Bool__Maybe struct {
	m schema.Maybe
	v _Bool
}
type MaybeBool = *_Bool__Maybe

func (m MaybeBool) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBool) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBool) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBool) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBool) Must() Bool {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bool)(&_Bool{})
var _ schema.TypedNode = (Bool)(&_Bool{})

func (Bool) Kind() datamodel.Kind {
	return datamodel.Kind_Bool
}
func (Bool) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.LookupByString("")
}
func (Bool) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.LookupByNode(nil)
}
func (Bool) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.LookupByIndex(0)
}
func (Bool) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.LookupBySegment(seg)
}
func (Bool) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bool) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bool) Length() int64 {
	return -1
}
func (Bool) IsAbsent() bool {
	return false
}
func (Bool) IsNull() bool {
	return false
}
func (n Bool) AsBool() (bool, error) {
	return n.x, nil
}
func (Bool) AsInt() (int64, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.AsInt()
}
func (Bool) AsFloat() (float64, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.AsFloat()
}
func (Bool) AsString() (string, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.AsString()
}
func (Bool) AsBytes() ([]byte, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.AsBytes()
}
func (Bool) AsLink() (datamodel.Link, error) {
	return mixins.Bool{TypeName: "schema.Bool"}.AsLink()
}
func (Bool) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}

type _Bool__Prototype struct{}

func (_Bool__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bool__Builder
	nb.Reset()
	return &nb
}

type _Bool__Builder struct {
	_Bool__Assembler
}

func (nb *_Bool__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bool__Builder) Reset() {
	var w _Bool
	var m schema.Maybe
	*nb = _Bool__Builder{_Bool__Assembler{w: &w, m: &m}}
}

type _Bool__Assembler struct {
	w *_Bool
	m *schema.Maybe
}

func (na *_Bool__Assembler) reset() {}
func (_Bool__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.BeginMap(0)
}
func (_Bool__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.BeginList(0)
}
func (na *_Bool__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (na *_Bool__Assembler) AssignBool(v bool) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bool__Assembler) AssignInt(int64) error {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignInt(0)
}
func (_Bool__Assembler) AssignFloat(float64) error {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignFloat(0)
}
func (_Bool__Assembler) AssignString(string) error {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignString("")
}
func (_Bool__Assembler) AssignBytes([]byte) error {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignBytes(nil)
}
func (_Bool__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BoolAssembler{TypeName: "schema.Bool"}.AssignLink(nil)
}
func (na *_Bool__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bool); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBool(); err != nil {
		return err
	} else {
		return na.AssignBool(v2)
	}
}
func (_Bool__Assembler) Prototype() datamodel.NodePrototype {
	return _Bool__Prototype{}
}
func (Bool) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bool) Representation() datamodel.Node {
	return (*_Bool__Repr)(n)
}

type _Bool__Repr = _Bool

var _ datamodel.Node = &_Bool__Repr{}

type _Bool__ReprPrototype = _Bool__Prototype
type _Bool__ReprAssembler = _Bool__Assembler

func (n Bytes) Bytes() []byte {
	return n.x
}
func (_Bytes__Prototype) FromBytes(v []byte) (Bytes, error) {
	n := _Bytes{v}
	return &n, nil
}

type _Bytes__Maybe struct {
	m schema.Maybe
	v _Bytes
}
type MaybeBytes = *_Bytes__Maybe

func (m MaybeBytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeBytes) Must() Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Bytes)(&_Bytes{})
var _ schema.TypedNode = (Bytes)(&_Bytes{})

func (Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_Bytes
}
func (Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByString("")
}
func (Bytes) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByNode(nil)
}
func (Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupByIndex(0)
}
func (Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.LookupBySegment(seg)
}
func (Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (Bytes) ListIterator() datamodel.ListIterator {
	return nil
}
func (Bytes) Length() int64 {
	return -1
}
func (Bytes) IsAbsent() bool {
	return false
}
func (Bytes) IsNull() bool {
	return false
}
func (Bytes) AsBool() (bool, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsBool()
}
func (Bytes) AsInt() (int64, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsInt()
}
func (Bytes) AsFloat() (float64, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsFloat()
}
func (Bytes) AsString() (string, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsString()
}
func (n Bytes) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Bytes) AsLink() (datamodel.Link, error) {
	return mixins.Bytes{TypeName: "schema.Bytes"}.AsLink()
}
func (Bytes) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}

type _Bytes__Prototype struct{}

func (_Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Bytes__Builder
	nb.Reset()
	return &nb
}

type _Bytes__Builder struct {
	_Bytes__Assembler
}

func (nb *_Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Bytes__Builder) Reset() {
	var w _Bytes
	var m schema.Maybe
	*nb = _Bytes__Builder{_Bytes__Assembler{w: &w, m: &m}}
}

type _Bytes__Assembler struct {
	w *_Bytes
	m *schema.Maybe
}

func (na *_Bytes__Assembler) reset() {}
func (_Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.BeginMap(0)
}
func (_Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.BeginList(0)
}
func (na *_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Bytes__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignBool(false)
}
func (_Bytes__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignInt(0)
}
func (_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignFloat(0)
}
func (_Bytes__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignString("")
}
func (na *_Bytes__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.BytesAssembler{TypeName: "schema.Bytes"}.AssignLink(nil)
}
func (na *_Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Bytes) Representation() datamodel.Node {
	return (*_Bytes__Repr)(n)
}

type _Bytes__Repr = _Bytes

var _ datamodel.Node = &_Bytes__Repr{}

type _Bytes__ReprPrototype = _Bytes__Prototype
type _Bytes__ReprAssembler = _Bytes__Assembler

func (n _EntryChunk) FieldEntries() List_Bytes {
	return &n.Entries
}
func (n _EntryChunk) FieldNext() MaybeLink_EntryChunk {
	return &n.Next
}

type _EntryChunk__Maybe struct {
	m schema.Maybe
	v EntryChunk
}
type MaybeEntryChunk = *_EntryChunk__Maybe

func (m MaybeEntryChunk) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeEntryChunk) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeEntryChunk) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeEntryChunk) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeEntryChunk) Must() EntryChunk {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}

var (
	fieldName__EntryChunk_Entries = _String{"Entries"}
	fieldName__EntryChunk_Next    = _String{"Next"}
)
var _ datamodel.Node = (EntryChunk)(&_EntryChunk{})
var _ schema.TypedNode = (EntryChunk)(&_EntryChunk{})

func (EntryChunk) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n EntryChunk) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Entries":
		return &n.Entries, nil
	case "Next":
		if n.Next.m == schema.Maybe_Absent {
			return datamodel.Absent, nil
		}
		return &n.Next.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n EntryChunk) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (EntryChunk) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.LookupByIndex(0)
}
func (n EntryChunk) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n EntryChunk) MapIterator() datamodel.MapIterator {
	return &_EntryChunk__MapItr{n, 0}
}

type _EntryChunk__MapItr struct {
	n   EntryChunk
	idx int
}

func (itr *_EntryChunk__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__EntryChunk_Entries
		v = &itr.n.Entries
	case 1:
		k = &fieldName__EntryChunk_Next
		if itr.n.Next.m == schema.Maybe_Absent {
			v = datamodel.Absent
			break
		}
		v = &itr.n.Next.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_EntryChunk__MapItr) Done() bool {
	return itr.idx >= 2
}

func (EntryChunk) ListIterator() datamodel.ListIterator {
	return nil
}
func (EntryChunk) Length() int64 {
	return 2
}
func (EntryChunk) IsAbsent() bool {
	return false
}
func (EntryChunk) IsNull() bool {
	return false
}
func (EntryChunk) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsBool()
}
func (EntryChunk) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsInt()
}
func (EntryChunk) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsFloat()
}
func (EntryChunk) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsString()
}
func (EntryChunk) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsBytes()
}
func (EntryChunk) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.EntryChunk"}.AsLink()
}
func (EntryChunk) Prototype() datamodel.NodePrototype {
	return _EntryChunk__Prototype{}
}

type _EntryChunk__Prototype struct{}

func (_EntryChunk__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _EntryChunk__Builder
	nb.Reset()
	return &nb
}

type _EntryChunk__Builder struct {
	_EntryChunk__Assembler
}

func (nb *_EntryChunk__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_EntryChunk__Builder) Reset() {
	var w _EntryChunk
	var m schema.Maybe
	*nb = _EntryChunk__Builder{_EntryChunk__Assembler{w: &w, m: &m}}
}

type _EntryChunk__Assembler struct {
	w     *_EntryChunk
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm         schema.Maybe
	ca_Entries _List_Bytes__Assembler
	ca_Next    _Link_EntryChunk__Assembler
}

func (na *_EntryChunk__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Entries.reset()
	na.ca_Next.reset()
}

var (
	fieldBit__EntryChunk_Entries     = 1 << 0
	fieldBit__EntryChunk_Next        = 1 << 1
	fieldBits__EntryChunk_sufficient = 0 + 1<<0
)

func (na *_EntryChunk__Assembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_EntryChunk{}
	}
	return na, nil
}
func (_EntryChunk__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.BeginList(0)
}
func (na *_EntryChunk__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_EntryChunk__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignBool(false)
}
func (_EntryChunk__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignInt(0)
}
func (_EntryChunk__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignFloat(0)
}
func (_EntryChunk__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignString("")
}
func (_EntryChunk__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignBytes(nil)
}
func (_EntryChunk__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk"}.AssignLink(nil)
}
func (na *_EntryChunk__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_EntryChunk); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.EntryChunk", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_EntryChunk__Assembler) Prototype() datamodel.NodePrototype {
	return _EntryChunk__Prototype{}
}
func (ma *_EntryChunk__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Entries.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.Next.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_EntryChunk__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Entries":
		if ma.s&fieldBit__EntryChunk_Entries != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Entries}
		}
		ma.s += fieldBit__EntryChunk_Entries
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries, nil
	case "Next":
		if ma.s&fieldBit__EntryChunk_Next != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Next}
		}
		ma.s += fieldBit__EntryChunk_Next
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Next.w = &ma.w.Next.v
		ma.ca_Next.m = &ma.w.Next.m
		return &ma.ca_Next, nil
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.EntryChunk", Key: &_String{k}}
}
func (ma *_EntryChunk__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_EntryChunk__KeyAssembler)(ma)
}
func (ma *_EntryChunk__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries
	case 1:
		ma.ca_Next.w = &ma.w.Next.v
		ma.ca_Next.m = &ma.w.Next.m
		return &ma.ca_Next
	default:
		panic("unreachable")
	}
}
func (ma *_EntryChunk__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__EntryChunk_sufficient != fieldBits__EntryChunk_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__EntryChunk_Entries == 0 {
			err.Missing = append(err.Missing, "Entries")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_EntryChunk__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_EntryChunk__Assembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}

type _EntryChunk__KeyAssembler _EntryChunk__Assembler

func (_EntryChunk__KeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.BeginMap(0)
}
func (_EntryChunk__KeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.BeginList(0)
}
func (na *_EntryChunk__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignNull()
}
func (_EntryChunk__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignBool(false)
}
func (_EntryChunk__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignInt(0)
}
func (_EntryChunk__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignFloat(0)
}
func (ka *_EntryChunk__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Entries":
		if ka.s&fieldBit__EntryChunk_Entries != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Entries}
		}
		ka.s += fieldBit__EntryChunk_Entries
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Next":
		if ka.s&fieldBit__EntryChunk_Next != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Next}
		}
		ka.s += fieldBit__EntryChunk_Next
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	default:
		return schema.ErrInvalidKey{TypeName: "schema.EntryChunk", Key: &_String{k}}
	}
}
func (_EntryChunk__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignBytes(nil)
}
func (_EntryChunk__KeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.KeyAssembler"}.AssignLink(nil)
}
func (ka *_EntryChunk__KeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_EntryChunk__KeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (EntryChunk) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n EntryChunk) Representation() datamodel.Node {
	return (*_EntryChunk__Repr)(n)
}

type _EntryChunk__Repr _EntryChunk

var (
	fieldName__EntryChunk_Entries_serial = _String{"Entries"}
	fieldName__EntryChunk_Next_serial    = _String{"Next"}
)
var _ datamodel.Node = &_EntryChunk__Repr{}

func (_EntryChunk__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n *_EntryChunk__Repr) LookupByString(key string) (datamodel.Node, error) {
	switch key {
	case "Entries":
		return n.Entries.Representation(), nil
	case "Next":
		if n.Next.m == schema.Maybe_Absent {
			return datamodel.Absent, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(key)}
		}
		return n.Next.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: datamodel.PathSegmentOfString(key)}
	}
}
func (n *_EntryChunk__Repr) LookupByNode(key datamodel.Node) (datamodel.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_EntryChunk__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.LookupByIndex(0)
}
func (n _EntryChunk__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_EntryChunk__Repr) MapIterator() datamodel.MapIterator {
	end := 2
	if n.Next.m == schema.Maybe_Absent {
		end = 1
	} else {
		goto done
	}
done:
	return &_EntryChunk__ReprMapItr{n, 0, end}
}

type _EntryChunk__ReprMapItr struct {
	n   *_EntryChunk__Repr
	idx int
	end int
}

func (itr *_EntryChunk__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
advance:
	if itr.idx >= 2 {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__EntryChunk_Entries_serial
		v = itr.n.Entries.Representation()
	case 1:
		k = &fieldName__EntryChunk_Next_serial
		if itr.n.Next.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Next.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_EntryChunk__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_EntryChunk__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_EntryChunk__Repr) Length() int64 {
	l := 2
	if rn.Next.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_EntryChunk__Repr) IsAbsent() bool {
	return false
}
func (_EntryChunk__Repr) IsNull() bool {
	return false
}
func (_EntryChunk__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsBool()
}
func (_EntryChunk__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsInt()
}
func (_EntryChunk__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsFloat()
}
func (_EntryChunk__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsString()
}
func (_EntryChunk__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsBytes()
}
func (_EntryChunk__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.EntryChunk.Repr"}.AsLink()
}
func (_EntryChunk__Repr) Prototype() datamodel.NodePrototype {
	return _EntryChunk__ReprPrototype{}
}

type _EntryChunk__ReprPrototype struct{}

func (_EntryChunk__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _EntryChunk__ReprBuilder
	nb.Reset()
	return &nb
}

type _EntryChunk__ReprBuilder struct {
	_EntryChunk__ReprAssembler
}

func (nb *_EntryChunk__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_EntryChunk__ReprBuilder) Reset() {
	var w _EntryChunk
	var m schema.Maybe
	*nb = _EntryChunk__ReprBuilder{_EntryChunk__ReprAssembler{w: &w, m: &m}}
}

type _EntryChunk__ReprAssembler struct {
	w     *_EntryChunk
	m     *schema.Maybe
	state maState
	s     int
	f     int

	cm         schema.Maybe
	ca_Entries _List_Bytes__ReprAssembler
	ca_Next    _Link_EntryChunk__ReprAssembler
}

func (na *_EntryChunk__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Entries.reset()
	na.ca_Next.reset()
}
func (na *_EntryChunk__ReprAssembler) BeginMap(int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_EntryChunk{}
	}
	return na, nil
}
func (_EntryChunk__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.BeginList(0)
}
func (na *_EntryChunk__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_EntryChunk__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignBool(false)
}
func (_EntryChunk__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignInt(0)
}
func (_EntryChunk__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignFloat(0)
}
func (_EntryChunk__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignString("")
}
func (_EntryChunk__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignBytes(nil)
}
func (_EntryChunk__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.EntryChunk.Repr"}.AssignLink(nil)
}
func (na *_EntryChunk__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_EntryChunk); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.EntryChunk.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_EntryChunk__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _EntryChunk__ReprPrototype{}
}
func (ma *_EntryChunk__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.w.Next.m {
		case schema.Maybe_Value:
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_EntryChunk__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Entries":
		if ma.s&fieldBit__EntryChunk_Entries != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Entries_serial}
		}
		ma.s += fieldBit__EntryChunk_Entries
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries, nil
	case "Next":
		if ma.s&fieldBit__EntryChunk_Next != 0 {
			return nil, datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Next_serial}
		}
		ma.s += fieldBit__EntryChunk_Next
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Next.w = &ma.w.Next.v
		ma.ca_Next.m = &ma.w.Next.m

		return &ma.ca_Next, nil
	default:
	}
	return nil, schema.ErrInvalidKey{TypeName: "schema.EntryChunk.Repr", Key: &_String{k}}
}
func (ma *_EntryChunk__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_EntryChunk__ReprKeyAssembler)(ma)
}
func (ma *_EntryChunk__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Entries.w = &ma.w.Entries
		ma.ca_Entries.m = &ma.cm
		return &ma.ca_Entries
	case 1:
		ma.ca_Next.w = &ma.w.Next.v
		ma.ca_Next.m = &ma.w.Next.m

		return &ma.ca_Next
	default:
		panic("unreachable")
	}
}
func (ma *_EntryChunk__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s&fieldBits__EntryChunk_sufficient != fieldBits__EntryChunk_sufficient {
		err := schema.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s&fieldBit__EntryChunk_Entries == 0 {
			err.Missing = append(err.Missing, "Entries")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_EntryChunk__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_EntryChunk__ReprAssembler) ValuePrototype(k string) datamodel.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}

type _EntryChunk__ReprKeyAssembler _EntryChunk__ReprAssembler

func (_EntryChunk__ReprKeyAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.BeginMap(0)
}
func (_EntryChunk__ReprKeyAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_EntryChunk__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignNull()
}
func (_EntryChunk__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignBool(false)
}
func (_EntryChunk__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignInt(0)
}
func (_EntryChunk__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_EntryChunk__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Entries":
		if ka.s&fieldBit__EntryChunk_Entries != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Entries_serial}
		}
		ka.s += fieldBit__EntryChunk_Entries
		ka.state = maState_expectValue
		ka.f = 0
		return nil
	case "Next":
		if ka.s&fieldBit__EntryChunk_Next != 0 {
			return datamodel.ErrRepeatedMapKey{Key: &fieldName__EntryChunk_Next_serial}
		}
		ka.s += fieldBit__EntryChunk_Next
		ka.state = maState_expectValue
		ka.f = 1
		return nil
	}
	return schema.ErrInvalidKey{TypeName: "schema.EntryChunk.Repr", Key: &_String{k}}
}
func (_EntryChunk__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_EntryChunk__ReprKeyAssembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.EntryChunk.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_EntryChunk__ReprKeyAssembler) AssignNode(v datamodel.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_EntryChunk__ReprKeyAssembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

func (n Float) Float() float64 {
	return n.x
}
func (_Float__Prototype) FromFloat(v float64) (Float, error) {
	n := _Float{v}
	return &n, nil
}

type _Float__Maybe struct {
	m schema.Maybe
	v _Float
}
type MaybeFloat = *_Float__Maybe

func (m MaybeFloat) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeFloat) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeFloat) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeFloat) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeFloat) Must() Float {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Float)(&_Float{})
var _ schema.TypedNode = (Float)(&_Float{})

func (Float) Kind() datamodel.Kind {
	return datamodel.Kind_Float
}
func (Float) LookupByString(string) (datamodel.Node, error) {
	return mixins.Float{TypeName: "schema.Float"}.LookupByString("")
}
func (Float) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Float{TypeName: "schema.Float"}.LookupByNode(nil)
}
func (Float) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Float{TypeName: "schema.Float"}.LookupByIndex(0)
}
func (Float) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Float{TypeName: "schema.Float"}.LookupBySegment(seg)
}
func (Float) MapIterator() datamodel.MapIterator {
	return nil
}
func (Float) ListIterator() datamodel.ListIterator {
	return nil
}
func (Float) Length() int64 {
	return -1
}
func (Float) IsAbsent() bool {
	return false
}
func (Float) IsNull() bool {
	return false
}
func (Float) AsBool() (bool, error) {
	return mixins.Float{TypeName: "schema.Float"}.AsBool()
}
func (Float) AsInt() (int64, error) {
	return mixins.Float{TypeName: "schema.Float"}.AsInt()
}
func (n Float) AsFloat() (float64, error) {
	return n.x, nil
}
func (Float) AsString() (string, error) {
	return mixins.Float{TypeName: "schema.Float"}.AsString()
}
func (Float) AsBytes() ([]byte, error) {
	return mixins.Float{TypeName: "schema.Float"}.AsBytes()
}
func (Float) AsLink() (datamodel.Link, error) {
	return mixins.Float{TypeName: "schema.Float"}.AsLink()
}
func (Float) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}

type _Float__Prototype struct{}

func (_Float__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Float__Builder
	nb.Reset()
	return &nb
}

type _Float__Builder struct {
	_Float__Assembler
}

func (nb *_Float__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Float__Builder) Reset() {
	var w _Float
	var m schema.Maybe
	*nb = _Float__Builder{_Float__Assembler{w: &w, m: &m}}
}

type _Float__Assembler struct {
	w *_Float
	m *schema.Maybe
}

func (na *_Float__Assembler) reset() {}
func (_Float__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.BeginMap(0)
}
func (_Float__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.BeginList(0)
}
func (na *_Float__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Float__Assembler) AssignBool(bool) error {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignBool(false)
}
func (_Float__Assembler) AssignInt(int64) error {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignInt(0)
}
func (na *_Float__Assembler) AssignFloat(v float64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Float__Assembler) AssignString(string) error {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignString("")
}
func (_Float__Assembler) AssignBytes([]byte) error {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignBytes(nil)
}
func (_Float__Assembler) AssignLink(datamodel.Link) error {
	return mixins.FloatAssembler{TypeName: "schema.Float"}.AssignLink(nil)
}
func (na *_Float__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Float); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsFloat(); err != nil {
		return err
	} else {
		return na.AssignFloat(v2)
	}
}
func (_Float__Assembler) Prototype() datamodel.NodePrototype {
	return _Float__Prototype{}
}
func (Float) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Float) Representation() datamodel.Node {
	return (*_Float__Repr)(n)
}

type _Float__Repr = _Float

var _ datamodel.Node = &_Float__Repr{}

type _Float__ReprPrototype = _Float__Prototype
type _Float__ReprAssembler = _Float__Assembler

func (n Int) Int() int64 {
	return n.x
}
func (_Int__Prototype) FromInt(v int64) (Int, error) {
	n := _Int{v}
	return &n, nil
}

type _Int__Maybe struct {
	m schema.Maybe
	v _Int
}
type MaybeInt = *_Int__Maybe

func (m MaybeInt) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeInt) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeInt) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeInt) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeInt) Must() Int {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Int)(&_Int{})
var _ schema.TypedNode = (Int)(&_Int{})

func (Int) Kind() datamodel.Kind {
	return datamodel.Kind_Int
}
func (Int) LookupByString(string) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByString("")
}
func (Int) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByNode(nil)
}
func (Int) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupByIndex(0)
}
func (Int) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Int{TypeName: "schema.Int"}.LookupBySegment(seg)
}
func (Int) MapIterator() datamodel.MapIterator {
	return nil
}
func (Int) ListIterator() datamodel.ListIterator {
	return nil
}
func (Int) Length() int64 {
	return -1
}
func (Int) IsAbsent() bool {
	return false
}
func (Int) IsNull() bool {
	return false
}
func (Int) AsBool() (bool, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsBool()
}
func (n Int) AsInt() (int64, error) {
	return n.x, nil
}
func (Int) AsFloat() (float64, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsFloat()
}
func (Int) AsString() (string, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsString()
}
func (Int) AsBytes() ([]byte, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsBytes()
}
func (Int) AsLink() (datamodel.Link, error) {
	return mixins.Int{TypeName: "schema.Int"}.AsLink()
}
func (Int) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}

type _Int__Prototype struct{}

func (_Int__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Int__Builder
	nb.Reset()
	return &nb
}

type _Int__Builder struct {
	_Int__Assembler
}

func (nb *_Int__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Int__Builder) Reset() {
	var w _Int
	var m schema.Maybe
	*nb = _Int__Builder{_Int__Assembler{w: &w, m: &m}}
}

type _Int__Assembler struct {
	w *_Int
	m *schema.Maybe
}

func (na *_Int__Assembler) reset() {}
func (_Int__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.IntAssembler{TypeName: "schema.Int"}.BeginMap(0)
}
func (_Int__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.IntAssembler{TypeName: "schema.Int"}.BeginList(0)
}
func (na *_Int__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.IntAssembler{TypeName: "schema.Int"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Int__Assembler) AssignBool(bool) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignBool(false)
}
func (na *_Int__Assembler) AssignInt(v int64) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Int__Assembler) AssignFloat(float64) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignFloat(0)
}
func (_Int__Assembler) AssignString(string) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignString("")
}
func (_Int__Assembler) AssignBytes([]byte) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignBytes(nil)
}
func (_Int__Assembler) AssignLink(datamodel.Link) error {
	return mixins.IntAssembler{TypeName: "schema.Int"}.AssignLink(nil)
}
func (na *_Int__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Int); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsInt(); err != nil {
		return err
	} else {
		return na.AssignInt(v2)
	}
}
func (_Int__Assembler) Prototype() datamodel.NodePrototype {
	return _Int__Prototype{}
}
func (Int) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Int) Representation() datamodel.Node {
	return (*_Int__Repr)(n)
}

type _Int__Repr = _Int

var _ datamodel.Node = &_Int__Repr{}

type _Int__ReprPrototype = _Int__Prototype
type _Int__ReprAssembler = _Int__Assembler

func (n Link) Link() datamodel.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v datamodel.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}

type _Link__Maybe struct {
	m schema.Maybe
	v _Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})

func (Link) Kind() datamodel.Kind {
	return datamodel.Kind_Link
}
func (Link) LookupByString(string) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link"}.LookupByString("")
}
func (Link) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() datamodel.MapIterator {
	return nil
}
func (Link) ListIterator() datamodel.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{TypeName: "schema.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{TypeName: "schema.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "schema.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{TypeName: "schema.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "schema.Link"}.AsBytes()
}
func (n Link) AsLink() (datamodel.Link, error) {
	return n.x, nil
}
func (Link) Prototype() datamodel.NodePrototype {
	return _Link__Prototype{}
}

type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}

type _Link__Builder struct {
	_Link__Assembler
}

func (nb *_Link__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}

type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "schema.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v datamodel.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() datamodel.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() datamodel.Node {
	return (*_Link__Repr)(n)
}

type _Link__Repr = _Link

var _ datamodel.Node = &_Link__Repr{}

type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n Link_Advertisement) Link() datamodel.Link {
	return n.x
}
func (_Link_Advertisement__Prototype) FromLink(v datamodel.Link) (Link_Advertisement, error) {
	n := _Link_Advertisement{v}
	return &n, nil
}

type _Link_Advertisement__Maybe struct {
	m schema.Maybe
	v _Link_Advertisement
}
type MaybeLink_Advertisement = *_Link_Advertisement__Maybe

func (m MaybeLink_Advertisement) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink_Advertisement) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink_Advertisement) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink_Advertisement) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink_Advertisement) Must() Link_Advertisement {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Link_Advertisement)(&_Link_Advertisement{})
var _ schema.TypedNode = (Link_Advertisement)(&_Link_Advertisement{})

func (Link_Advertisement) Kind() datamodel.Kind {
	return datamodel.Kind_Link
}
func (Link_Advertisement) LookupByString(string) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.LookupByString("")
}
func (Link_Advertisement) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.LookupByNode(nil)
}
func (Link_Advertisement) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.LookupByIndex(0)
}
func (Link_Advertisement) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.LookupBySegment(seg)
}
func (Link_Advertisement) MapIterator() datamodel.MapIterator {
	return nil
}
func (Link_Advertisement) ListIterator() datamodel.ListIterator {
	return nil
}
func (Link_Advertisement) Length() int64 {
	return -1
}
func (Link_Advertisement) IsAbsent() bool {
	return false
}
func (Link_Advertisement) IsNull() bool {
	return false
}
func (Link_Advertisement) AsBool() (bool, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.AsBool()
}
func (Link_Advertisement) AsInt() (int64, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.AsInt()
}
func (Link_Advertisement) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.AsFloat()
}
func (Link_Advertisement) AsString() (string, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.AsString()
}
func (Link_Advertisement) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "schema.Link_Advertisement"}.AsBytes()
}
func (n Link_Advertisement) AsLink() (datamodel.Link, error) {
	return n.x, nil
}
func (Link_Advertisement) Prototype() datamodel.NodePrototype {
	return _Link_Advertisement__Prototype{}
}

type _Link_Advertisement__Prototype struct{}

func (_Link_Advertisement__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Link_Advertisement__Builder
	nb.Reset()
	return &nb
}

type _Link_Advertisement__Builder struct {
	_Link_Advertisement__Assembler
}

func (nb *_Link_Advertisement__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link_Advertisement__Builder) Reset() {
	var w _Link_Advertisement
	var m schema.Maybe
	*nb = _Link_Advertisement__Builder{_Link_Advertisement__Assembler{w: &w, m: &m}}
}

type _Link_Advertisement__Assembler struct {
	w *_Link_Advertisement
	m *schema.Maybe
}

func (na *_Link_Advertisement__Assembler) reset() {}
func (_Link_Advertisement__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.BeginMap(0)
}
func (_Link_Advertisement__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.BeginList(0)
}
func (na *_Link_Advertisement__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link_Advertisement__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignBool(false)
}
func (_Link_Advertisement__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignInt(0)
}
func (_Link_Advertisement__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignFloat(0)
}
func (_Link_Advertisement__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignString("")
}
func (_Link_Advertisement__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_Advertisement"}.AssignBytes(nil)
}
func (na *_Link_Advertisement__Assembler) AssignLink(v datamodel.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link_Advertisement__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link_Advertisement); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link_Advertisement__Assembler) Prototype() datamodel.NodePrototype {
	return _Link_Advertisement__Prototype{}
}
func (Link_Advertisement) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link_Advertisement) LinkTargetNodePrototype() datamodel.NodePrototype {
	return Type.Advertisement__Repr
}
func (n Link_Advertisement) Representation() datamodel.Node {
	return (*_Link_Advertisement__Repr)(n)
}

type _Link_Advertisement__Repr = _Link_Advertisement

var _ datamodel.Node = &_Link_Advertisement__Repr{}

type _Link_Advertisement__ReprPrototype = _Link_Advertisement__Prototype
type _Link_Advertisement__ReprAssembler = _Link_Advertisement__Assembler

func (n Link_EntryChunk) Link() datamodel.Link {
	return n.x
}
func (_Link_EntryChunk__Prototype) FromLink(v datamodel.Link) (Link_EntryChunk, error) {
	n := _Link_EntryChunk{v}
	return &n, nil
}

type _Link_EntryChunk__Maybe struct {
	m schema.Maybe
	v _Link_EntryChunk
}
type MaybeLink_EntryChunk = *_Link_EntryChunk__Maybe

func (m MaybeLink_EntryChunk) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink_EntryChunk) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink_EntryChunk) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink_EntryChunk) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeLink_EntryChunk) Must() Link_EntryChunk {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Link_EntryChunk)(&_Link_EntryChunk{})
var _ schema.TypedNode = (Link_EntryChunk)(&_Link_EntryChunk{})

func (Link_EntryChunk) Kind() datamodel.Kind {
	return datamodel.Kind_Link
}
func (Link_EntryChunk) LookupByString(string) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.LookupByString("")
}
func (Link_EntryChunk) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.LookupByNode(nil)
}
func (Link_EntryChunk) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.LookupByIndex(0)
}
func (Link_EntryChunk) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.LookupBySegment(seg)
}
func (Link_EntryChunk) MapIterator() datamodel.MapIterator {
	return nil
}
func (Link_EntryChunk) ListIterator() datamodel.ListIterator {
	return nil
}
func (Link_EntryChunk) Length() int64 {
	return -1
}
func (Link_EntryChunk) IsAbsent() bool {
	return false
}
func (Link_EntryChunk) IsNull() bool {
	return false
}
func (Link_EntryChunk) AsBool() (bool, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.AsBool()
}
func (Link_EntryChunk) AsInt() (int64, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.AsInt()
}
func (Link_EntryChunk) AsFloat() (float64, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.AsFloat()
}
func (Link_EntryChunk) AsString() (string, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.AsString()
}
func (Link_EntryChunk) AsBytes() ([]byte, error) {
	return mixins.Link{TypeName: "schema.Link_EntryChunk"}.AsBytes()
}
func (n Link_EntryChunk) AsLink() (datamodel.Link, error) {
	return n.x, nil
}
func (Link_EntryChunk) Prototype() datamodel.NodePrototype {
	return _Link_EntryChunk__Prototype{}
}

type _Link_EntryChunk__Prototype struct{}

func (_Link_EntryChunk__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Link_EntryChunk__Builder
	nb.Reset()
	return &nb
}

type _Link_EntryChunk__Builder struct {
	_Link_EntryChunk__Assembler
}

func (nb *_Link_EntryChunk__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link_EntryChunk__Builder) Reset() {
	var w _Link_EntryChunk
	var m schema.Maybe
	*nb = _Link_EntryChunk__Builder{_Link_EntryChunk__Assembler{w: &w, m: &m}}
}

type _Link_EntryChunk__Assembler struct {
	w *_Link_EntryChunk
	m *schema.Maybe
}

func (na *_Link_EntryChunk__Assembler) reset() {}
func (_Link_EntryChunk__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.BeginMap(0)
}
func (_Link_EntryChunk__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.BeginList(0)
}
func (na *_Link_EntryChunk__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link_EntryChunk__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignBool(false)
}
func (_Link_EntryChunk__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignInt(0)
}
func (_Link_EntryChunk__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignFloat(0)
}
func (_Link_EntryChunk__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignString("")
}
func (_Link_EntryChunk__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{TypeName: "schema.Link_EntryChunk"}.AssignBytes(nil)
}
func (na *_Link_EntryChunk__Assembler) AssignLink(v datamodel.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link_EntryChunk__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link_EntryChunk); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link_EntryChunk__Assembler) Prototype() datamodel.NodePrototype {
	return _Link_EntryChunk__Prototype{}
}
func (Link_EntryChunk) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (Link_EntryChunk) LinkTargetNodePrototype() datamodel.NodePrototype {
	return Type.EntryChunk__Repr
}
func (n Link_EntryChunk) Representation() datamodel.Node {
	return (*_Link_EntryChunk__Repr)(n)
}

type _Link_EntryChunk__Repr = _Link_EntryChunk

var _ datamodel.Node = &_Link_EntryChunk__Repr{}

type _Link_EntryChunk__ReprPrototype = _Link_EntryChunk__Prototype
type _Link_EntryChunk__ReprAssembler = _Link_EntryChunk__Assembler

func (n *_List) Lookup(idx int64) Any {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_List) LookupMaybe(idx int64) MaybeAny {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}

var _List__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n List) Iterator() *List__Itr {
	return &List__Itr{n, 0}
}

type List__Itr struct {
	n   List
	idx int
}

func (itr *List__Itr) Next() (idx int64, v MaybeAny) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List__Maybe struct {
	m schema.Maybe
	v _List
}
type MaybeList = *_List__Maybe

func (m MaybeList) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList) Must() List {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List)(&_List{})
var _ schema.TypedNode = (List)(&_List{})

func (List) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List"}.LookupByString("")
}
func (n List) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	if v.m == schema.Maybe_Null {
		return datamodel.Null, nil
	}
	return v.v, nil
}
func (n List) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List) ListIterator() datamodel.ListIterator {
	return &_List__ListItr{n, 0}
}

type _List__ListItr struct {
	n   List
	idx int
}

func (itr *_List__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	switch x.m {
	case schema.Maybe_Null:
		v = datamodel.Null
	case schema.Maybe_Value:
		v = x.v
	}
	itr.idx++
	return
}
func (itr *_List__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List) Length() int64 {
	return int64(len(n.x))
}
func (List) IsAbsent() bool {
	return false
}
func (List) IsNull() bool {
	return false
}
func (List) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List"}.AsBool()
}
func (List) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List"}.AsInt()
}
func (List) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List"}.AsFloat()
}
func (List) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List"}.AsString()
}
func (List) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List"}.AsBytes()
}
func (List) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List"}.AsLink()
}
func (List) Prototype() datamodel.NodePrototype {
	return _List__Prototype{}
}

type _List__Prototype struct{}

func (_List__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__Builder
	nb.Reset()
	return &nb
}

type _List__Builder struct {
	_List__Assembler
}

func (nb *_List__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__Builder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__Builder{_List__Assembler{w: &w, m: &m}}
}

type _List__Assembler struct {
	w     *_List
	m     *schema.Maybe
	state laState

	va _Any__Assembler
}

func (na *_List__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List"}.BeginMap(0)
}
func (na *_List__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignBool(false)
}
func (_List__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignInt(0)
}
func (_List__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignFloat(0)
}
func (_List__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignString("")
}
func (_List__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignBytes(nil)
}
func (_List__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List"}.AssignLink(nil)
}
func (na *_List__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__Assembler) Prototype() datamodel.NodePrototype {
	return _List__Prototype{}
}
func (la *_List__Assembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (List) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List) Representation() datamodel.Node {
	return (*_List__Repr)(n)
}

type _List__Repr _List

var _ datamodel.Node = &_List__Repr{}

func (_List__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.LookupByString("")
}
func (nr *_List__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_List__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (n _List__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List__Repr) ListIterator() datamodel.ListIterator {
	return &_List__ReprListItr{(List)(nr), 0}
}

type _List__ReprListItr _List__ListItr

func (itr *_List__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Any).Representation(), nil
}
func (itr *_List__ReprListItr) Done() bool {
	return (*_List__ListItr)(itr).Done()
}

func (rn *_List__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List__Repr) IsAbsent() bool {
	return false
}
func (_List__Repr) IsNull() bool {
	return false
}
func (_List__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsBool()
}
func (_List__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsInt()
}
func (_List__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsFloat()
}
func (_List__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsString()
}
func (_List__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsBytes()
}
func (_List__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List.Repr"}.AsLink()
}
func (_List__Repr) Prototype() datamodel.NodePrototype {
	return _List__ReprPrototype{}
}

type _List__ReprPrototype struct{}

func (_List__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List__ReprBuilder
	nb.Reset()
	return &nb
}

type _List__ReprBuilder struct {
	_List__ReprAssembler
}

func (nb *_List__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List__ReprBuilder) Reset() {
	var w _List
	var m schema.Maybe
	*nb = _List__ReprBuilder{_List__ReprAssembler{w: &w, m: &m}}
}

type _List__ReprAssembler struct {
	w     *_List
	m     *schema.Maybe
	state laState

	va _Any__ReprAssembler
}

func (na *_List__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.BeginMap(0)
}
func (na *_List__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Any__Maybe, 0, sizeHint)
	}
	return na, nil
}
func (na *_List__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignBool(false)
}
func (_List__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignInt(0)
}
func (_List__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignFloat(0)
}
func (_List__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignString("")
}
func (_List__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignBytes(nil)
}
func (_List__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List.Repr"}.AssignLink(nil)
}
func (na *_List__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List__ReprPrototype{}
}
func (la *_List__ReprAssembler) valueFinishTidy() bool {
	row := &la.w.x[len(la.w.x)-1]
	switch row.m {
	case schema.Maybe_Value:
		row.v = la.va.w
		la.va.w = nil
		fallthrough
	case schema.Maybe_Null:
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Any__Maybe{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.m = &row.m
	row.m = allowNull
	return &la.va
}
func (la *_List__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n *_List_Bytes) Lookup(idx int64) Bytes {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List_Bytes) LookupMaybe(idx int64) MaybeBytes {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Bytes__Maybe{
		m: schema.Maybe_Value,
		v: *v,
	}
}

var _List_Bytes__valueAbsent = _Bytes__Maybe{m: schema.Maybe_Absent}

func (n List_Bytes) Iterator() *List_Bytes__Itr {
	return &List_Bytes__Itr{n, 0}
}

type List_Bytes__Itr struct {
	n   List_Bytes
	idx int
}

func (itr *List_Bytes__Itr) Next() (idx int64, v Bytes) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List_Bytes__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List_Bytes__Maybe struct {
	m schema.Maybe
	v _List_Bytes
}
type MaybeList_Bytes = *_List_Bytes__Maybe

func (m MaybeList_Bytes) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList_Bytes) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList_Bytes) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList_Bytes) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList_Bytes) Must() List_Bytes {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List_Bytes)(&_List_Bytes{})
var _ schema.TypedNode = (List_Bytes)(&_List_Bytes{})

func (List_Bytes) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List_Bytes) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.LookupByString("")
}
func (n List_Bytes) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List_Bytes) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List_Bytes) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List_Bytes", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List_Bytes) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List_Bytes) ListIterator() datamodel.ListIterator {
	return &_List_Bytes__ListItr{n, 0}
}

type _List_Bytes__ListItr struct {
	n   List_Bytes
	idx int
}

func (itr *_List_Bytes__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List_Bytes__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List_Bytes) Length() int64 {
	return int64(len(n.x))
}
func (List_Bytes) IsAbsent() bool {
	return false
}
func (List_Bytes) IsNull() bool {
	return false
}
func (List_Bytes) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsBool()
}
func (List_Bytes) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsInt()
}
func (List_Bytes) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsFloat()
}
func (List_Bytes) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsString()
}
func (List_Bytes) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsBytes()
}
func (List_Bytes) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List_Bytes"}.AsLink()
}
func (List_Bytes) Prototype() datamodel.NodePrototype {
	return _List_Bytes__Prototype{}
}

type _List_Bytes__Prototype struct{}

func (_List_Bytes__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List_Bytes__Builder
	nb.Reset()
	return &nb
}

type _List_Bytes__Builder struct {
	_List_Bytes__Assembler
}

func (nb *_List_Bytes__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_Bytes__Builder) Reset() {
	var w _List_Bytes
	var m schema.Maybe
	*nb = _List_Bytes__Builder{_List_Bytes__Assembler{w: &w, m: &m}}
}

type _List_Bytes__Assembler struct {
	w     *_List_Bytes
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Bytes__Assembler
}

func (na *_List_Bytes__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_Bytes__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.BeginMap(0)
}
func (na *_List_Bytes__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Bytes, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_Bytes__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_Bytes__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignBool(false)
}
func (_List_Bytes__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignInt(0)
}
func (_List_Bytes__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignFloat(0)
}
func (_List_Bytes__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignString("")
}
func (_List_Bytes__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignBytes(nil)
}
func (_List_Bytes__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes"}.AssignLink(nil)
}
func (na *_List_Bytes__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List_Bytes", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_Bytes__Assembler) Prototype() datamodel.NodePrototype {
	return _List_Bytes__Prototype{}
}
func (la *_List_Bytes__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_Bytes__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Bytes{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_Bytes__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_Bytes__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Bytes__Prototype{}
}
func (List_Bytes) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List_Bytes) Representation() datamodel.Node {
	return (*_List_Bytes__Repr)(n)
}

type _List_Bytes__Repr _List_Bytes

var _ datamodel.Node = &_List_Bytes__Repr{}

func (_List_Bytes__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List_Bytes__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.LookupByString("")
}
func (nr *_List_Bytes__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List_Bytes)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Bytes).Representation(), nil
}
func (nr *_List_Bytes__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List_Bytes)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Bytes).Representation(), nil
}
func (n _List_Bytes__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List_Bytes.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List_Bytes__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List_Bytes__Repr) ListIterator() datamodel.ListIterator {
	return &_List_Bytes__ReprListItr{(List_Bytes)(nr), 0}
}

type _List_Bytes__ReprListItr _List_Bytes__ListItr

func (itr *_List_Bytes__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List_Bytes__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(Bytes).Representation(), nil
}
func (itr *_List_Bytes__ReprListItr) Done() bool {
	return (*_List_Bytes__ListItr)(itr).Done()
}

func (rn *_List_Bytes__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List_Bytes__Repr) IsAbsent() bool {
	return false
}
func (_List_Bytes__Repr) IsNull() bool {
	return false
}
func (_List_Bytes__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsBool()
}
func (_List_Bytes__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsInt()
}
func (_List_Bytes__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsFloat()
}
func (_List_Bytes__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsString()
}
func (_List_Bytes__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsBytes()
}
func (_List_Bytes__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List_Bytes.Repr"}.AsLink()
}
func (_List_Bytes__Repr) Prototype() datamodel.NodePrototype {
	return _List_Bytes__ReprPrototype{}
}

type _List_Bytes__ReprPrototype struct{}

func (_List_Bytes__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List_Bytes__ReprBuilder
	nb.Reset()
	return &nb
}

type _List_Bytes__ReprBuilder struct {
	_List_Bytes__ReprAssembler
}

func (nb *_List_Bytes__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_Bytes__ReprBuilder) Reset() {
	var w _List_Bytes
	var m schema.Maybe
	*nb = _List_Bytes__ReprBuilder{_List_Bytes__ReprAssembler{w: &w, m: &m}}
}

type _List_Bytes__ReprAssembler struct {
	w     *_List_Bytes
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _Bytes__ReprAssembler
}

func (na *_List_Bytes__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_Bytes__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.BeginMap(0)
}
func (na *_List_Bytes__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_Bytes, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_Bytes__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_Bytes__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignBool(false)
}
func (_List_Bytes__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignInt(0)
}
func (_List_Bytes__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignFloat(0)
}
func (_List_Bytes__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignString("")
}
func (_List_Bytes__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignBytes(nil)
}
func (_List_Bytes__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List_Bytes.Repr"}.AssignLink(nil)
}
func (na *_List_Bytes__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_Bytes); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List_Bytes.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_Bytes__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List_Bytes__ReprPrototype{}
}
func (la *_List_Bytes__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_Bytes__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Bytes{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_Bytes__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_Bytes__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _Bytes__ReprPrototype{}
}

func (n *_List_String) Lookup(idx int64) String {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_List_String) LookupMaybe(idx int64) MaybeString {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_String__Maybe{
		m: schema.Maybe_Value,
		v: *v,
	}
}

var _List_String__valueAbsent = _String__Maybe{m: schema.Maybe_Absent}

func (n List_String) Iterator() *List_String__Itr {
	return &List_String__Itr{n, 0}
}

type List_String__Itr struct {
	n   List_String
	idx int
}

func (itr *List_String__Itr) Next() (idx int64, v String) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *List_String__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _List_String__Maybe struct {
	m schema.Maybe
	v _List_String
}
type MaybeList_String = *_List_String__Maybe

func (m MaybeList_String) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeList_String) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeList_String) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeList_String) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeList_String) Must() List_String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (List_String)(&_List_String{})
var _ schema.TypedNode = (List_String)(&_List_String{})

func (List_String) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (List_String) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List_String"}.LookupByString("")
}
func (n List_String) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n List_String) LookupByIndex(idx int64) (datamodel.Node, error) {
	if n.Length() <= idx {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n List_String) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List_String", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (List_String) MapIterator() datamodel.MapIterator {
	return nil
}
func (n List_String) ListIterator() datamodel.ListIterator {
	return &_List_String__ListItr{n, 0}
}

type _List_String__ListItr struct {
	n   List_String
	idx int
}

func (itr *_List_String__ListItr) Next() (idx int64, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, datamodel.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_List_String__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n List_String) Length() int64 {
	return int64(len(n.x))
}
func (List_String) IsAbsent() bool {
	return false
}
func (List_String) IsNull() bool {
	return false
}
func (List_String) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsBool()
}
func (List_String) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsInt()
}
func (List_String) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsFloat()
}
func (List_String) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsString()
}
func (List_String) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsBytes()
}
func (List_String) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List_String"}.AsLink()
}
func (List_String) Prototype() datamodel.NodePrototype {
	return _List_String__Prototype{}
}

type _List_String__Prototype struct{}

func (_List_String__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List_String__Builder
	nb.Reset()
	return &nb
}

type _List_String__Builder struct {
	_List_String__Assembler
}

func (nb *_List_String__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_String__Builder) Reset() {
	var w _List_String
	var m schema.Maybe
	*nb = _List_String__Builder{_List_String__Assembler{w: &w, m: &m}}
}

type _List_String__Assembler struct {
	w     *_List_String
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _String__Assembler
}

func (na *_List_String__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_String__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.BeginMap(0)
}
func (na *_List_String__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_String, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_String__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignBool(false)
}
func (_List_String__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignInt(0)
}
func (_List_String__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignFloat(0)
}
func (_List_String__Assembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignString("")
}
func (_List_String__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignBytes(nil)
}
func (_List_String__Assembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List_String"}.AssignLink(nil)
}
func (na *_List_String__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List_String", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_String__Assembler) Prototype() datamodel.NodePrototype {
	return _List_String__Prototype{}
}
func (la *_List_String__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_String__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _String{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_String__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_String__Assembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _String__Prototype{}
}
func (List_String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n List_String) Representation() datamodel.Node {
	return (*_List_String__Repr)(n)
}

type _List_String__Repr _List_String

var _ datamodel.Node = &_List_String__Repr{}

func (_List_String__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_List
}
func (_List_String__Repr) LookupByString(string) (datamodel.Node, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.LookupByString("")
}
func (nr *_List_String__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (List_String)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(String).Representation(), nil
}
func (nr *_List_String__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	v, err := (List_String)(nr).LookupByIndex(idx)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(String).Representation(), nil
}
func (n _List_String__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, datamodel.ErrInvalidSegmentForList{TypeName: "schema.List_String.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_List_String__Repr) MapIterator() datamodel.MapIterator {
	return nil
}
func (nr *_List_String__Repr) ListIterator() datamodel.ListIterator {
	return &_List_String__ReprListItr{(List_String)(nr), 0}
}

type _List_String__ReprListItr _List_String__ListItr

func (itr *_List_String__ReprListItr) Next() (idx int64, v datamodel.Node, err error) {
	idx, v, err = (*_List_String__ListItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return idx, v.(String).Representation(), nil
}
func (itr *_List_String__ReprListItr) Done() bool {
	return (*_List_String__ListItr)(itr).Done()
}

func (rn *_List_String__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_List_String__Repr) IsAbsent() bool {
	return false
}
func (_List_String__Repr) IsNull() bool {
	return false
}
func (_List_String__Repr) AsBool() (bool, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsBool()
}
func (_List_String__Repr) AsInt() (int64, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsInt()
}
func (_List_String__Repr) AsFloat() (float64, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsFloat()
}
func (_List_String__Repr) AsString() (string, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsString()
}
func (_List_String__Repr) AsBytes() ([]byte, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsBytes()
}
func (_List_String__Repr) AsLink() (datamodel.Link, error) {
	return mixins.List{TypeName: "schema.List_String.Repr"}.AsLink()
}
func (_List_String__Repr) Prototype() datamodel.NodePrototype {
	return _List_String__ReprPrototype{}
}

type _List_String__ReprPrototype struct{}

func (_List_String__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _List_String__ReprBuilder
	nb.Reset()
	return &nb
}

type _List_String__ReprBuilder struct {
	_List_String__ReprAssembler
}

func (nb *_List_String__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_List_String__ReprBuilder) Reset() {
	var w _List_String
	var m schema.Maybe
	*nb = _List_String__ReprBuilder{_List_String__ReprAssembler{w: &w, m: &m}}
}

type _List_String__ReprAssembler struct {
	w     *_List_String
	m     *schema.Maybe
	state laState

	cm schema.Maybe
	va _String__ReprAssembler
}

func (na *_List_String__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_List_String__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.BeginMap(0)
}
func (na *_List_String__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if sizeHint > 0 {
		na.w.x = make([]_String, 0, sizeHint)
	}
	return na, nil
}
func (na *_List_String__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{TypeName: "schema.List_String.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_List_String__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignBool(false)
}
func (_List_String__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignInt(0)
}
func (_List_String__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignFloat(0)
}
func (_List_String__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignString("")
}
func (_List_String__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignBytes(nil)
}
func (_List_String__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.ListAssembler{TypeName: "schema.List_String.Repr"}.AssignLink(nil)
}
func (na *_List_String__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_List_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_List {
		return datamodel.ErrWrongKind{TypeName: "schema.List_String.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_List_String__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _List_String__ReprPrototype{}
}
func (la *_List_String__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_List_String__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _String{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_List_String__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_List_String__ReprAssembler) ValuePrototype(_ int64) datamodel.NodePrototype {
	return _String__ReprPrototype{}
}

func (n *_Map) Lookup(k String) Any {
	v, exists := n.m[*k]
	if !exists {
		return nil
	}
	if v.m == schema.Maybe_Null {
		return nil
	}
	return v.v
}
func (n *_Map) LookupMaybe(k String) MaybeAny {
	v, exists := n.m[*k]
	if !exists {
		return &_Map__valueAbsent
	}
	return v
}

var _Map__valueAbsent = _Any__Maybe{m: schema.Maybe_Absent}

func (n Map) Iterator() *Map__Itr {
	return &Map__Itr{n, 0}
}

type Map__Itr struct {
	n   Map
	idx int
}

func (itr *Map__Itr) Next() (k String, v MaybeAny) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	v = &x.v
	itr.idx++
	return
}
func (itr *Map__Itr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

type _Map__Maybe struct {
	m schema.Maybe
	v _Map
}
type MaybeMap = *_Map__Maybe

func (m MaybeMap) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeMap) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeMap) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeMap) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeMap) Must() Map {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (Map)(&_Map{})
var _ schema.TypedNode = (Map)(&_Map{})

func (Map) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (n Map) LookupByString(k string) (datamodel.Node, error) {
	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	v, exists := n.m[k2]
	if !exists {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(k)}
	}
	if v.m == schema.Maybe_Null {
		return datamodel.Null, nil
	}
	return v.v, nil
}
func (n Map) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	k2, ok := k.(String)
	if !ok {
		panic("todo invalid key type error")
		// 'schema.ErrInvalidKey{TypeName:"schema.Map", Key:&_String{k}}' doesn't quite cut it: need room to explain the type, and it's not guaranteed k can be turned into a string at all
	}
	v, exists := n.m[*k2]
	if !exists {
		return nil, datamodel.ErrNotExists{Segment: datamodel.PathSegmentOfString(k2.String())}
	}
	if v.m == schema.Maybe_Null {
		return datamodel.Null, nil
	}
	return v.v, nil
}
func (Map) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Map"}.LookupByIndex(0)
}
func (n Map) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Map) MapIterator() datamodel.MapIterator {
	return &_Map__MapItr{n, 0}
}

type _Map__MapItr struct {
	n   Map
	idx int
}

func (itr *_Map__MapItr) Next() (k datamodel.Node, v datamodel.Node, _ error) {
	if itr.idx >= len(itr.n.t) {
		return nil, nil, datamodel.ErrIteratorOverread{}
	}
	x := &itr.n.t[itr.idx]
	k = &x.k
	switch x.v.m {
	case schema.Maybe_Null:
		v = datamodel.Null
	case schema.Maybe_Value:
		v = x.v.v
	}
	itr.idx++
	return
}
func (itr *_Map__MapItr) Done() bool {
	return itr.idx >= len(itr.n.t)
}

func (Map) ListIterator() datamodel.ListIterator {
	return nil
}
func (n Map) Length() int64 {
	return int64(len(n.t))
}
func (Map) IsAbsent() bool {
	return false
}
func (Map) IsNull() bool {
	return false
}
func (Map) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsBool()
}
func (Map) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsInt()
}
func (Map) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsFloat()
}
func (Map) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsString()
}
func (Map) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsBytes()
}
func (Map) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Map"}.AsLink()
}
func (Map) Prototype() datamodel.NodePrototype {
	return _Map__Prototype{}
}

type _Map__Prototype struct{}

func (_Map__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Map__Builder
	nb.Reset()
	return &nb
}

type _Map__Builder struct {
	_Map__Assembler
}

func (nb *_Map__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__Builder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__Builder{_Map__Assembler{w: &w, m: &m}}
}

type _Map__Assembler struct {
	w     *_Map
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__Assembler
	va _Any__Assembler
}

func (na *_Map__Assembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Map"}.BeginList(0)
}
func (na *_Map__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Map"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignBool(false)
}
func (_Map__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignInt(0)
}
func (_Map__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignFloat(0)
}
func (_Map__Assembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignString("")
}
func (_Map__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignBytes(nil)
}
func (_Map__Assembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Map"}.AssignLink(nil)
}
func (na *_Map__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Map", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__Assembler) Prototype() datamodel.NodePrototype {
	return _Map__Prototype{}
}
func (ma *_Map__Assembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__Assembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, datamodel.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__Assembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__Assembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__Assembler) KeyPrototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Map__Assembler) ValuePrototype(_ string) datamodel.NodePrototype {
	return _Any__Prototype{}
}
func (Map) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Map) Representation() datamodel.Node {
	return (*_Map__Repr)(n)
}

type _Map__Repr _Map

var _ datamodel.Node = &_Map__Repr{}

func (_Map__Repr) Kind() datamodel.Kind {
	return datamodel.Kind_Map
}
func (nr *_Map__Repr) LookupByString(k string) (datamodel.Node, error) {
	v, err := (Map)(nr).LookupByString(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (nr *_Map__Repr) LookupByNode(k datamodel.Node) (datamodel.Node, error) {
	v, err := (Map)(nr).LookupByNode(k)
	if err != nil || v == datamodel.Null {
		return v, err
	}
	return v.(Any).Representation(), nil
}
func (_Map__Repr) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.LookupByIndex(0)
}
func (n _Map__Repr) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return n.LookupByString(seg.String())
}
func (nr *_Map__Repr) MapIterator() datamodel.MapIterator {
	return &_Map__ReprMapItr{(Map)(nr), 0}
}

type _Map__ReprMapItr _Map__MapItr

func (itr *_Map__ReprMapItr) Next() (k datamodel.Node, v datamodel.Node, err error) {
	k, v, err = (*_Map__MapItr)(itr).Next()
	if err != nil || v == datamodel.Null {
		return
	}
	return k, v.(Any).Representation(), nil
}
func (itr *_Map__ReprMapItr) Done() bool {
	return (*_Map__MapItr)(itr).Done()
}

func (_Map__Repr) ListIterator() datamodel.ListIterator {
	return nil
}
func (rn *_Map__Repr) Length() int64 {
	return int64(len(rn.t))
}
func (_Map__Repr) IsAbsent() bool {
	return false
}
func (_Map__Repr) IsNull() bool {
	return false
}
func (_Map__Repr) AsBool() (bool, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsBool()
}
func (_Map__Repr) AsInt() (int64, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsInt()
}
func (_Map__Repr) AsFloat() (float64, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsFloat()
}
func (_Map__Repr) AsString() (string, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsString()
}
func (_Map__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsBytes()
}
func (_Map__Repr) AsLink() (datamodel.Link, error) {
	return mixins.Map{TypeName: "schema.Map.Repr"}.AsLink()
}
func (_Map__Repr) Prototype() datamodel.NodePrototype {
	return _Map__ReprPrototype{}
}

type _Map__ReprPrototype struct{}

func (_Map__ReprPrototype) NewBuilder() datamodel.NodeBuilder {
	var nb _Map__ReprBuilder
	nb.Reset()
	return &nb
}

type _Map__ReprBuilder struct {
	_Map__ReprAssembler
}

func (nb *_Map__ReprBuilder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Map__ReprBuilder) Reset() {
	var w _Map
	var m schema.Maybe
	*nb = _Map__ReprBuilder{_Map__ReprAssembler{w: &w, m: &m}}
}

type _Map__ReprAssembler struct {
	w     *_Map
	m     *schema.Maybe
	state maState

	cm schema.Maybe
	ka _String__ReprAssembler
	va _Any__ReprAssembler
}

func (na *_Map__ReprAssembler) reset() {
	na.state = maState_initial
	na.ka.reset()
	na.va.reset()
}
func (na *_Map__ReprAssembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	na.w.m = make(map[_String]MaybeAny, sizeHint)
	na.w.t = make([]_Map__entry, 0, sizeHint)
	return na, nil
}
func (_Map__ReprAssembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.BeginList(0)
}
func (na *_Map__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{TypeName: "schema.Map.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Map__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignBool(false)
}
func (_Map__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignInt(0)
}
func (_Map__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignFloat(0)
}
func (_Map__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignString("")
}
func (_Map__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignBytes(nil)
}
func (_Map__ReprAssembler) AssignLink(datamodel.Link) error {
	return mixins.MapAssembler{TypeName: "schema.Map.Repr"}.AssignLink(nil)
}
func (na *_Map__ReprAssembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Map); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != datamodel.Kind_Map {
		return datamodel.ErrWrongKind{TypeName: "schema.Map.Repr", MethodName: "AssignNode", AppropriateKind: datamodel.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Map__ReprAssembler) Prototype() datamodel.NodePrototype {
	return _Map__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) keyFinishTidy() bool {
	switch ma.cm {
	case schema.Maybe_Value:
		ma.ka.w = nil
		tz := &ma.w.t[len(ma.w.t)-1]
		ma.cm = schema.Maybe_Absent
		ma.state = maState_expectValue
		ma.w.m[tz.k] = &tz.v
		ma.va.m = &tz.v.m
		tz.v.m = allowNull
		ma.ka.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) valueFinishTidy() bool {
	tz := &ma.w.t[len(ma.w.t)-1]
	switch tz.v.m {
	case schema.Maybe_Null:
		ma.state = maState_initial
		ma.va.reset()
		return true
	case schema.Maybe_Value:
		tz.v.v = ma.va.w
		ma.va.w = nil
		ma.state = maState_initial
		ma.va.reset()
		return true
	default:
		return false
	}
}
func (ma *_Map__ReprAssembler) AssembleEntry(k string) (datamodel.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}

	var k2 _String
	if err := (_String__ReprPrototype{}).fromString(&k2, k); err != nil {
		return nil, err // TODO wrap in some kind of ErrInvalidKey
	}
	if _, exists := ma.w.m[k2]; exists {
		return nil, datamodel.ErrRepeatedMapKey{Key: &k2}
	}
	ma.w.t = append(ma.w.t, _Map__entry{k: k2})
	tz := &ma.w.t[len(ma.w.t)-1]
	ma.state = maState_midValue

	ma.w.m[k2] = &tz.v
	ma.va.m = &tz.v.m
	tz.v.m = allowNull
	return &ma.va, nil
}
func (ma *_Map__ReprAssembler) AssembleKey() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.w.t = append(ma.w.t, _Map__entry{})
	ma.state = maState_midKey
	ma.ka.m = &ma.cm
	ma.ka.w = &ma.w.t[len(ma.w.t)-1].k
	return &ma.ka
}
func (ma *_Map__ReprAssembler) AssembleValue() datamodel.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		if !ma.keyFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
		} // if tidy success: carry on
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	return &ma.va
}
func (ma *_Map__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Map__ReprAssembler) KeyPrototype() datamodel.NodePrototype {
	return _String__ReprPrototype{}
}
func (ma *_Map__ReprAssembler) ValuePrototype(_ string) datamodel.NodePrototype {
	return _Any__ReprPrototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}

type _String__Maybe struct {
	m schema.Maybe
	v _String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() datamodel.Node {
	switch m.m {
	case schema.Maybe_Absent:
		return datamodel.Absent
	case schema.Maybe_Null:
		return datamodel.Null
	case schema.Maybe_Value:
		return &m.v
	default:
		panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return &m.v
}

var _ datamodel.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})

func (String) Kind() datamodel.Kind {
	return datamodel.Kind_String
}
func (String) LookupByString(string) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByString("")
}
func (String) LookupByNode(datamodel.Node) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg datamodel.PathSegment) (datamodel.Node, error) {
	return mixins.String{TypeName: "schema.String"}.LookupBySegment(seg)
}
func (String) MapIterator() datamodel.MapIterator {
	return nil
}
func (String) ListIterator() datamodel.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{TypeName: "schema.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{TypeName: "schema.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{TypeName: "schema.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{TypeName: "schema.String"}.AsBytes()
}
func (String) AsLink() (datamodel.Link, error) {
	return mixins.String{TypeName: "schema.String"}.AsLink()
}
func (String) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}

type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() datamodel.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}

type _String__Builder struct {
	_String__Assembler
}

func (nb *_String__Builder) Build() datamodel.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}

type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (datamodel.MapAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (datamodel.ListAssembler, error) {
	return mixins.StringAssembler{TypeName: "schema.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{TypeName: "schema.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(datamodel.Link) error {
	return mixins.StringAssembler{TypeName: "schema.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v datamodel.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() datamodel.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() datamodel.Node {
	return (*_String__Repr)(n)
}

type _String__Repr = _String

var _ datamodel.Node = &_String__Repr{}

type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler
