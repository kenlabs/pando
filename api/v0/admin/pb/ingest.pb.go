// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ingest.proto

package reqresp_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IngestMessage_MessageType int32

const (
	IngestMessage_ERROR_RESPONSE             IngestMessage_MessageType = 0
	IngestMessage_LIST_PROVIDERS             IngestMessage_MessageType = 1
	IngestMessage_LIST_PROVIDERS_RESPONSE    IngestMessage_MessageType = 2
	IngestMessage_GET_PROVIDER               IngestMessage_MessageType = 3
	IngestMessage_GET_PROVIDER_RESPONSE      IngestMessage_MessageType = 4
	IngestMessage_DISCOVER_PROVIDER          IngestMessage_MessageType = 5
	IngestMessage_DISCOVER_PROVIDER_RESPONSE IngestMessage_MessageType = 6
	IngestMessage_REGISTER_PROVIDER          IngestMessage_MessageType = 7
	IngestMessage_REGISTER_PROVIDER_RESPONSE IngestMessage_MessageType = 8
	IngestMessage_REMOVE_PROVIDER            IngestMessage_MessageType = 9
	IngestMessage_REMOVE_PROVIDER_RESPONSE   IngestMessage_MessageType = 10
	IngestMessage_INDEX_CONTENT              IngestMessage_MessageType = 11
	IngestMessage_INDEX_CONTENT_RESPONSE     IngestMessage_MessageType = 12
)

var IngestMessage_MessageType_name = map[int32]string{
	0:  "ERROR_RESPONSE",
	1:  "LIST_PROVIDERS",
	2:  "LIST_PROVIDERS_RESPONSE",
	3:  "GET_PROVIDER",
	4:  "GET_PROVIDER_RESPONSE",
	5:  "DISCOVER_PROVIDER",
	6:  "DISCOVER_PROVIDER_RESPONSE",
	7:  "REGISTER_PROVIDER",
	8:  "REGISTER_PROVIDER_RESPONSE",
	9:  "REMOVE_PROVIDER",
	10: "REMOVE_PROVIDER_RESPONSE",
	11: "INDEX_CONTENT",
	12: "INDEX_CONTENT_RESPONSE",
}

var IngestMessage_MessageType_value = map[string]int32{
	"ERROR_RESPONSE":             0,
	"LIST_PROVIDERS":             1,
	"LIST_PROVIDERS_RESPONSE":    2,
	"GET_PROVIDER":               3,
	"GET_PROVIDER_RESPONSE":      4,
	"DISCOVER_PROVIDER":          5,
	"DISCOVER_PROVIDER_RESPONSE": 6,
	"REGISTER_PROVIDER":          7,
	"REGISTER_PROVIDER_RESPONSE": 8,
	"REMOVE_PROVIDER":            9,
	"REMOVE_PROVIDER_RESPONSE":   10,
	"INDEX_CONTENT":              11,
	"INDEX_CONTENT_RESPONSE":     12,
}

func (x IngestMessage_MessageType) String() string {
	return proto.EnumName(IngestMessage_MessageType_name, int32(x))
}

func (IngestMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff993cce43359ffa, []int{0, 0}
}

type IngestMessage struct {
	// defines what type of message it is.
	Type IngestMessage_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=reqresp.pb.IngestMessage_MessageType" json:"type,omitempty"`
	// Value for the message
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *IngestMessage) Reset()         { *m = IngestMessage{} }
func (m *IngestMessage) String() string { return proto.CompactTextString(m) }
func (*IngestMessage) ProtoMessage()    {}
func (*IngestMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff993cce43359ffa, []int{0}
}
func (m *IngestMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IngestMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IngestMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IngestMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IngestMessage.Merge(m, src)
}
func (m *IngestMessage) XXX_Size() int {
	return m.Size()
}
func (m *IngestMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_IngestMessage.DiscardUnknown(m)
}

var xxx_messageInfo_IngestMessage proto.InternalMessageInfo

func (m *IngestMessage) GetType() IngestMessage_MessageType {
	if m != nil {
		return m.Type
	}
	return IngestMessage_ERROR_RESPONSE
}

func (m *IngestMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("reqresp.pb.IngestMessage_MessageType", IngestMessage_MessageType_name, IngestMessage_MessageType_value)
	proto.RegisterType((*IngestMessage)(nil), "reqresp.pb.IngestMessage")
}

func init() { proto.RegisterFile("ingest.proto", fileDescriptor_ff993cce43359ffa) }

var fileDescriptor_ff993cce43359ffa = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd1, 0x31, 0x4f, 0xfa, 0x40,
	0x18, 0xc7, 0xf1, 0x1e, 0xf0, 0xe7, 0xaf, 0x0f, 0x05, 0xcb, 0x63, 0xd0, 0x8a, 0xe6, 0x42, 0x48,
	0x4c, 0x98, 0x3a, 0xe8, 0xe4, 0x2a, 0x5c, 0xc8, 0x25, 0xd2, 0x23, 0x77, 0x0d, 0x71, 0x23, 0x10,
	0x2f, 0xc4, 0x45, 0x6a, 0xdb, 0x85, 0x77, 0xe1, 0x4b, 0xf1, 0x65, 0xb8, 0xc9, 0xe8, 0x68, 0xda,
	0x37, 0x62, 0xda, 0x98, 0x5c, 0x2b, 0x53, 0x9b, 0xef, 0xf3, 0xfb, 0x4c, 0x07, 0xf6, 0xf3, 0xcb,
	0x46, 0xc7, 0x89, 0x17, 0x46, 0xdb, 0x64, 0x8b, 0x10, 0xe9, 0xd7, 0x48, 0xc7, 0xa1, 0x17, 0xae,
	0x87, 0xef, 0x75, 0x68, 0xf3, 0xe2, 0x38, 0xd3, 0x71, 0xbc, 0xda, 0x68, 0xbc, 0x83, 0x46, 0xb2,
	0x0b, 0xb5, 0x4b, 0x06, 0x64, 0xd4, 0xb9, 0xb9, 0xf6, 0xcc, 0xd8, 0xab, 0x0c, 0xbd, 0xdf, 0x6f,
	0xb0, 0x0b, 0xb5, 0x2c, 0x08, 0x22, 0x34, 0x9e, 0x56, 0xc9, 0xca, 0xad, 0x0d, 0xc8, 0xc8, 0x96,
	0xc5, 0xff, 0xf0, 0xb3, 0x06, 0xad, 0xd2, 0x12, 0x11, 0x3a, 0x4c, 0x4a, 0x21, 0x97, 0x92, 0xa9,
	0xb9, 0xf0, 0x15, 0x73, 0xac, 0xbc, 0x3d, 0x70, 0x15, 0x2c, 0xe7, 0x52, 0x2c, 0xf8, 0x84, 0x49,
	0xe5, 0x10, 0xbc, 0x84, 0xf3, 0x6a, 0x33, 0xa0, 0x86, 0x0e, 0xd8, 0x53, 0x66, 0x6e, 0x4e, 0x1d,
	0x2f, 0xa0, 0x57, 0x2e, 0x66, 0xdc, 0xc0, 0x1e, 0x74, 0x27, 0x5c, 0x8d, 0xc5, 0x82, 0x49, 0x23,
	0xfe, 0x21, 0x85, 0xfe, 0x41, 0x36, 0xac, 0x99, 0x33, 0xc9, 0xa6, 0x5c, 0x05, 0x65, 0xf6, 0x3f,
	0x67, 0x07, 0xd9, 0xb0, 0x23, 0x3c, 0x85, 0x13, 0xc9, 0x66, 0x62, 0xc1, 0x0c, 0x3a, 0xc6, 0x2b,
	0x70, 0xff, 0x44, 0x43, 0x00, 0xbb, 0xd0, 0xe6, 0xfe, 0x84, 0x3d, 0x2e, 0xc7, 0xc2, 0x0f, 0x98,
	0x1f, 0x38, 0x2d, 0xec, 0xc3, 0x59, 0x25, 0x99, 0xb9, 0x7d, 0xef, 0x7e, 0xa4, 0x94, 0xec, 0x53,
	0x4a, 0xbe, 0x53, 0x4a, 0xde, 0x32, 0x6a, 0xed, 0x33, 0x6a, 0x7d, 0x65, 0xd4, 0x5a, 0x37, 0x8b,
	0xf7, 0xbd, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x34, 0xfd, 0x27, 0xef, 0x01, 0x00, 0x00,
}

func (m *IngestMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IngestMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IngestMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintIngest(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintIngest(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIngest(dAtA []byte, offset int, v uint64) int {
	offset -= sovIngest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IngestMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovIngest(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovIngest(uint64(l))
	}
	return n
}

func sovIngest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIngest(x uint64) (n int) {
	return sovIngest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IngestMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIngest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IngestMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IngestMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= IngestMessage_MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIngest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIngest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIngest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIngest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIngest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIngest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIngest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIngest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIngest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIngest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIngest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIngest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIngest = fmt.Errorf("proto: unexpected end of group")
)
